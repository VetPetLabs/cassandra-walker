// Code generated by go-bindata.
// sources:
// templates/common.go
// templates/model.go.tpl
// templates/models_types.go.tpl
// templates/not_used.go.tpl
// DO NOT EDIT!

package bind

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commonGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5d\x6f\xe3\x36\x10\x7c\x16\x7f\xc5\x94\x68\x11\x09\x56\xe5\xe4\x35\x89\x7b\x68\xd3\x3b\xa0\x45\xae\xe8\xd5\x45\x5b\xc0\x08\x0e\xb4\x4c\xa9\x74\x69\xd2\x21\xa9\x38\x6e\xe0\xff\x7e\x58\x8a\xf2\x29\x9f\x7a\xb1\x49\xce\xce\xce\xce\x2e\xb9\x15\xf5\x7f\xa2\x95\xb8\xaf\x19\x53\x9b\xad\x75\x01\x39\xcb\xb8\x0f\x4e\x99\xd6\x73\xc6\x32\xbe\xdc\x07\xe9\x39\xcb\x78\xb3\x09\x9c\x01\x00\xd7\xb6\xe5\xac\x60\xd3\x27\x1f\xae\x6d\xeb\xf1\xa1\x33\xb5\xc7\xd3\x33\xfa\xd8\x74\x0a\x6d\x5b\x34\x11\x21\x9c\xc4\x9d\x70\x4a\x2c\xb5\x8c\x5b\x25\xbc\xc5\xde\x76\xa8\x85\xc1\x89\x32\x6b\x59\x87\x13\xda\x70\xb0\x3b\x69\x50\x77\x3e\xd8\x0d\x31\xf8\x0a\xf2\x1e\x5e\x06\xdc\x57\xff\x5c\x5d\xdb\xf6\xbd\x73\x98\x45\x92\x5c\x3a\x07\xe9\x9c\x75\x05\x1e\x0e\x68\xac\x83\xb1\x81\x82\x5a\x65\x5a\xc6\xee\x84\xc3\x5b\x21\xb1\x40\xd5\xd0\x1a\xdf\xcc\x60\x94\x4e\x7b\xf4\x69\xdb\x56\xbf\x3b\x65\x82\x36\x14\x54\xc4\x83\x03\x3b\x8c\x68\x07\x4e\x1f\x1c\xaa\xaa\x52\x26\x48\xd7\x88\x5a\x3e\x1c\x46\xe4\x5a\x1a\x02\x14\xf8\x01\xa7\xaf\xd0\xf3\xab\x4f\xd7\xe7\xe0\x25\x08\xf7\x35\xcf\x23\xbb\xdf\x9b\x15\x6c\xd3\xbb\xfe\xdc\xec\xe7\xed\xb9\xb2\xc6\x07\x61\xc2\x4b\xdd\x61\x2c\xec\xb7\x12\xbb\x7f\xa5\x93\x57\x5a\x74\x5e\x52\xe6\xae\x0e\x78\x60\x59\x6d\xcd\x4a\x05\x65\x0d\xfa\xc1\x60\x99\x70\xad\xef\x45\x2f\x6e\x46\x35\x92\x44\x2a\x7f\xe0\xe9\xbc\xf4\x7f\xda\xf9\xad\xce\xe3\x86\xc7\xe2\x66\x94\xa1\xec\x61\x73\xb9\x4d\xbc\x05\xf2\xfe\x4f\xf9\x98\x96\xac\xcb\xc8\xe2\x9e\xe5\x47\xe7\xb0\xb8\x19\xa4\x50\x8b\x3f\x97\xd8\xe1\x7c\x06\x27\x4c\x9b\x8a\xf0\x14\x93\x7d\x0d\x98\x41\x6c\xb7\xd2\xac\xf2\xe3\x56\x89\x5d\x75\xac\xac\x60\xd9\x81\x25\xf8\x3c\x38\x22\x4b\x97\xa0\xfa\xd5\x2a\xf3\x28\x2a\x89\x2e\x58\x2f\x2a\x7a\xf1\xd8\x86\xb7\x45\xc5\x80\xa3\x1e\x5a\x91\x14\xfa\xad\xaa\xaa\x17\xe2\x64\xe8\x9c\xc1\x51\x4f\x19\xb3\x90\xbd\xbd\xbf\xfe\x56\x7f\x14\x66\xff\xb3\xd5\x5a\x38\x9f\xd7\x56\xcf\xd5\xff\xb2\x84\x93\x5b\x29\x02\x94\x09\x25\x94\xff\xb8\xf7\xb7\x1a\x4b\x6b\x75\x91\xaa\xa1\xfc\xd3\xe9\x70\x32\x43\x70\x9d\x64\x99\x6a\x8e\x60\xd2\xe7\xc7\xd5\xff\x11\x19\x73\xfe\xae\xe4\x25\x52\x9e\x22\x82\x66\xe0\x39\xc7\x04\x7e\x71\x7a\x1e\x27\xba\xf8\xfe\xec\x06\x13\xf0\xa2\xe4\x2c\xcb\x94\xf1\x7f\x09\xed\x3f\xbf\x40\xe6\x07\xa1\x64\xe1\x50\xeb\x80\x5f\x9c\xe2\x3c\xde\x90\x61\x83\x68\xc9\x14\x96\x2d\xbb\xa6\x21\xba\xf8\x24\x55\xbf\xc9\xdd\x4f\x5d\xd3\x48\x37\x8f\xec\x39\xe7\x05\xcb\x6a\x13\x08\x71\xd6\xb7\x40\xd1\xff\xd3\x0b\x28\x5c\xa6\x8c\x17\x50\x93\x49\xac\x92\xc8\xaa\xbf\x9d\x0a\x72\x88\xcf\x89\x20\xc6\xad\x53\xdc\x1a\x97\x43\xcd\x17\x58\xa7\xc0\xe7\x91\xcd\x26\x54\xf3\x2d\xdd\xdc\x26\xe7\xdf\x7e\xb7\x22\xa7\x4c\x28\x88\x8d\xbc\x5d\x4f\xce\xe8\x2d\x49\x44\x3d\xc7\x0b\xe9\xcb\x98\x9e\xba\x9f\x51\x19\x93\x09\xeb\x17\xcf\x91\x45\x44\x52\xd7\x7a\xe6\xd4\xf5\x97\xc5\x25\xde\xc3\x78\xae\x22\x28\x9d\x17\xc7\x4b\xbb\x5a\x7e\xea\xa4\xa7\xdb\xf0\xc1\xba\xf9\xad\xfe\xc5\xe4\x9e\x04\x2b\x13\xc6\xf3\xa3\x1a\xc4\xed\x4b\x9c\xc5\x94\x89\x93\xf3\xbe\x49\xc3\xf1\x6c\xf6\xe4\xfc\x5d\x02\xbc\x3e\x5e\xbe\x9f\x2d\x1a\x2d\x7f\x1c\x83\x7e\xac\xa6\x53\x27\x37\xf6\x4e\x42\x0b\x1f\x70\x52\x9e\x1c\x6b\xf1\x4f\xdf\xc5\xf1\xdb\xf8\xea\x93\xc7\xbe\x04\x00\x00\xff\xff\xcd\x95\x4f\x16\xfa\x06\x00\x00")

func commonGoBytes() ([]byte, error) {
	return bindataRead(
		_commonGo,
		"common.go",
	)
}

func commonGo() (*asset, error) {
	bytes, err := commonGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common.go", size: 1786, mode: os.FileMode(438), modTime: time.Unix(1536673083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7b\x6f\xdb\xc6\xb2\xff\x9b\x06\xfc\x1d\xa6\x44\x6e\x41\xda\x0c\xe9\x5c\xa0\xf7\x8f\xa4\xba\x85\x6b\x2b\xb9\xbe\x70\xac\xd6\x72\x9a\x73\x60\x18\x2a\x4d\xae\x6c\x9e\x50\xa4\xb5\x4b\x5a\x31\x08\x7e\xf7\x83\xd9\x17\x77\x29\x4a\xb6\x9b\xb6\x27\x05\x6a\xa0\x8d\xb4\x8f\xd9\x79\xfc\x66\x76\x66\x56\x77\x71\xf2\x29\xbe\x21\xf0\x39\xd9\xdd\xd9\xdd\xc9\x16\x77\x25\xad\xc0\xdb\xdd\x01\x00\x70\x09\xa5\x25\x65\xee\xee\x8e\xe3\xb2\x8a\x26\x65\x71\xaf\x3e\x67\xc5\x0d\x8e\xe3\xb7\x9b\xac\xba\xad\xaf\xc3\xa4\x5c\x44\x37\x65\xb2\xcc\xc5\xff\xdd\xdd\x1d\x1f\xe7\xa3\x27\xff\xc1\xcf\x35\xa1\x0f\xc0\x48\x4e\xaa\x92\x42\x7d\x97\xc6\x15\xa1\x10\x17\x29\xa4\x38\x46\x28\x6c\xdc\x8b\x27\xcd\xeb\x22\x01\x2f\x86\xbd\xa6\x09\x2f\xe2\xeb\x9c\x9c\xc5\x0b\xf2\xae\x6c\x5b\x1f\xc6\x9f\x33\x56\x31\xcf\x87\xeb\xb2\xcc\xa1\xd9\xdd\x71\x28\xa9\x6a\x5a\x40\x1c\xce\x08\x9f\xdb\xdd\x69\x1f\xa1\x71\xcc\x79\x48\x87\x89\x08\x06\x53\x49\x65\x77\xa7\x69\x5e\xc2\x0b\xc9\xf5\xc5\xc3\x1d\x81\xd7\x23\xb8\xa3\x59\x51\xcd\xc1\x9d\xcd\xfe\x8b\xcd\x04\x35\xea\x82\x7d\x8c\xdc\x29\x65\x1f\xdc\xf9\x41\xcc\x6d\xd8\x89\xda\x4b\xaa\x72\x78\xeb\x54\x4e\xae\xef\xdd\xdd\xa9\x70\x43\xd3\xd8\x14\xda\x16\x58\x45\xeb\xa4\x42\x71\x11\x11\xab\x5b\x42\x09\x03\xfe\x77\x79\xc5\xbf\x1d\xe5\x71\xcd\x88\x98\x16\x7b\x8f\xca\x9c\x4f\x0b\x98\x88\x99\x92\xa6\x84\xfe\xf8\x20\x37\x8a\x19\x88\x22\x57\x4c\xc0\xf5\x03\x64\x68\x66\x96\x40\x14\xcd\x4b\x0a\x59\x81\x36\xc1\xd5\x79\xb6\xc8\x2a\x71\x22\x8e\x8a\xc1\x38\xcf\xcb\xd5\xdb\x2c\x47\x50\xa0\x39\xa4\xe2\xb5\x10\xa6\x02\x37\x0b\x31\x20\x81\xd8\xc8\x00\x16\xf1\xdd\xa5\x60\xf3\x2a\x2b\x2a\x42\xe7\x71\x42\x9a\xb6\x7f\x8e\x69\xe2\xe7\x2a\x4b\xec\xed\x2b\x4b\x9e\x30\xe8\x20\xff\xaa\x59\x05\xca\x88\x0a\xac\x35\x82\x75\xcd\x6c\x3e\x9c\xa2\xde\x3c\xa1\xbd\xac\xa8\xfc\xc1\x65\x92\xd3\x3a\x14\xeb\x46\x42\xdb\x62\x50\xa2\xbb\xb6\x5c\x63\xf0\x34\x1f\x0e\x3b\x7b\x64\xc5\x8d\xe7\xc3\xf6\xd3\x4c\xf3\x8d\xa0\xa2\x35\x19\x3c\x52\x1e\x7a\x46\x56\x7d\x77\xd4\x50\xf6\xb6\xcb\x85\x2e\x30\x34\xdd\x5a\xe7\x7d\x6b\xc9\x38\x74\x9c\x74\x3a\x75\x9a\x01\xaf\x81\xc3\x7a\xb3\xad\x92\x5a\x61\x6b\x04\x8b\xf8\x13\xf1\x86\x11\xe6\x3f\x93\x33\x19\x48\x14\x67\x06\x20\x07\x38\xeb\xcd\x6e\xd0\x42\x14\x91\x38\xb9\x95\xce\x0c\x49\x99\xd7\x8b\x82\x61\x7c\x01\x1a\x17\x37\x04\xc2\x23\x31\x04\x18\x39\xb6\xc2\x42\x58\x69\xd6\x34\x6a\x0f\x67\x7b\x02\x6d\xfb\x88\xdd\xc2\x2e\x92\x8c\x20\xbe\xbb\x23\x45\xea\x19\x83\x01\xb8\x4d\x63\x90\x6c\x5b\x17\xfc\x01\x08\x49\x49\x84\x08\x22\xd4\x30\x88\x22\xee\x47\x22\xc2\x6c\x65\x1f\x26\x22\x6a\x0d\x09\x30\x3b\x26\x2c\x79\x4c\x0a\x15\xf5\x0c\x19\xe4\x50\x00\x2e\xf4\x44\x80\xe3\xf1\xf4\xc8\x1d\x12\xe3\x11\x36\xb7\x71\x79\xf8\x7b\x33\x79\xb8\x91\xc7\xa6\x01\x52\xa4\xd0\x3e\x12\xbf\x24\x60\xfb\xc6\x11\xd0\x7c\x12\xca\x2c\x14\xab\x8b\x79\x1b\xc8\x86\x9d\x22\xec\x02\xb0\x21\xba\x1e\x1c\xc0\xd8\x90\xdc\x86\xd4\x83\x32\x8f\x8b\x14\xca\x79\x4f\xf4\x6d\xfa\x91\xa1\xe6\x79\xfa\x71\x9a\x26\x9b\x83\x47\x96\x10\xa2\x94\xef\x4a\x70\xb3\xa2\x72\x7d\x3e\xe7\x58\xda\xb3\xa2\x93\x0f\x43\x6a\x2b\xc8\xea\x97\x38\x17\xb7\xc6\x86\x80\xe7\x38\x56\x4c\xbb\xec\xeb\x0a\x46\xf0\x03\xb8\x57\x30\x02\x41\x4c\xed\x30\x94\xe7\x38\x82\x71\x92\x33\x02\x7d\xee\x45\x60\xfc\x42\x01\x04\x91\x4d\x31\xfb\x8f\x16\xe1\xf2\xea\xfa\xa1\x22\x5f\x28\x82\x20\xf2\xc7\x8a\xe0\x38\x5c\x08\x8d\xe3\xa7\x40\xda\x86\x6a\xd3\xbc\xa8\xf0\x56\xc2\x7b\x26\x54\x34\x04\x4c\xbd\x05\x9b\x55\xe5\x8c\xe5\x59\x42\xec\x7c\xc9\x4a\xd2\xac\xe8\xe4\x2b\x4c\xc3\x8b\xf2\x8e\xd0\xb8\xca\xca\x42\x25\xb4\xa1\x9e\x13\xf4\xc5\xc1\xb6\x33\xf0\x9d\x49\x99\x1b\xeb\x71\x68\x95\x55\xb7\x10\xbe\x23\xd5\xfb\x32\xcd\xe6\x19\xde\x05\x62\xae\xa3\xa6\x56\x3b\x4e\x14\x35\x4d\xa8\xbe\x34\x0d\xb7\x6e\x49\xb9\x85\x91\xb4\xe5\x66\xe0\xaf\x8f\x4b\x00\x83\x0f\xbe\xa6\x29\x41\x90\x0a\x6b\xda\xa2\x29\x1c\xbc\xad\x8b\x04\x8d\x87\xe9\xa4\x77\x1f\xe7\xd0\x34\x06\x5d\x5c\xb5\xd7\x34\xf6\x5e\x85\x05\x47\x18\x77\x85\x62\x1b\xd9\x66\xd3\x1a\x93\xf7\x31\xe6\xd6\xec\x23\x4e\xc3\xa5\x9d\xda\xea\x45\x7a\x81\x8e\x8b\x6a\x24\xb8\x8f\x73\xdf\x3c\x2b\x8c\xe9\x0d\x66\x34\x6a\x81\x35\x97\x94\x45\x9a\x21\x97\x30\xe2\xc1\xf4\xb0\x48\x27\x14\xb9\x15\xe6\x31\xa0\x0a\x7c\x34\x3c\x52\x1b\xda\x16\x81\x6b\x10\x4b\x43\x99\x4d\x6b\x96\xd4\x48\x00\x2b\x5e\x68\xf2\xa5\xaa\x24\x4b\xe5\x77\x6d\x3f\x52\xa4\xda\xd6\xfa\x33\xff\xa8\xf1\x34\x00\xff\x67\x94\xaf\xa8\x01\xc0\xca\x25\xce\xf3\x81\x3a\xf5\xaf\xe2\x11\x27\xc5\x36\xa7\x68\x9a\x68\x0f\x42\xd8\x8b\xbe\x06\xc7\x08\xc3\xf0\x3f\xe0\x1b\x68\xe2\x59\x00\xf7\x48\x48\xa8\xe7\x3e\xce\x65\x4a\x81\x7f\x7c\xe1\x16\x07\x82\x7b\x99\x45\x98\xf8\xfc\xdd\x7d\xe9\xe4\x0c\x3c\x17\xf6\x21\xbd\xfe\xb9\x26\x0c\xb7\xbd\x2d\xe9\x74\x99\x9f\x14\x5e\x4e\x0a\x54\x9f\xef\xc3\x3e\xb8\xfe\x5f\xc9\xc9\x54\x2e\x85\x18\x1d\x5e\xf1\x08\x29\x60\x55\x4c\x2b\x24\xc1\xa5\x82\x24\xaf\x63\x46\xd8\x73\x58\x98\x2a\x0a\xb2\x3a\x1a\xe2\x61\x63\xb2\xce\xb1\x3c\xab\xca\xe9\x32\xf7\x7c\xf0\x84\x27\x04\x16\xd2\x7c\x84\xeb\xee\x8e\xc3\x96\xf9\x47\xa5\x79\xfc\xf7\x10\xa1\xd1\x61\xb7\x66\x84\x5d\x70\x3a\xb5\xb6\x90\x8b\xf9\xa9\xa3\x6b\x24\xbe\xdc\xdd\x43\xfb\x66\x73\x40\xab\x1b\x05\x94\x0f\xff\x0b\x07\xc2\x33\x8c\x0d\x23\x99\x31\xb1\xf0\xff\xcb\xac\xe8\x15\x5c\x01\x70\xfa\xad\x60\x8e\x55\x94\xd3\x9f\x8e\x4f\xc7\x47\x17\x80\x58\x33\x08\xed\x83\x0b\x6f\xcf\x27\xef\x39\x3a\x45\x38\xe2\x55\xeb\x34\xb9\x25\x0b\x32\xa9\x2b\x68\x5b\xd1\x3d\x94\xac\xa9\x73\x2f\x68\xb6\xf0\x0c\xd9\x5d\x70\x7d\xc9\x2b\x44\xd1\x7f\x73\xef\x63\xf1\xbc\x7a\xe0\x9c\x0b\x36\xf6\x47\xe0\xc2\xc7\xff\x1b\x9f\x8f\x05\x1b\x6a\xb7\x60\xd6\x14\x5f\x96\x35\x86\xf0\xb2\x24\x7c\xbd\x26\x79\x57\x01\x49\xb9\xad\xd3\x26\xe7\xc7\xe3\x73\xf8\xf1\x9f\xfc\x40\x41\xc3\x3c\x4d\xb5\x53\xbe\x19\x69\x25\x1b\x9b\x4f\x4f\xde\x9f\x48\x8d\x89\x9e\x6a\x78\x52\x95\xb1\x27\x37\x29\x1d\x73\x32\x66\x9f\x64\x8d\x0e\x1c\x9e\x9e\x4e\x3e\xc2\xdb\x93\xd3\x8b\xf1\xf9\xc9\xd9\x3b\x57\xee\xec\x1a\x93\x62\xb5\x81\xa0\xf5\x6a\x72\xad\x98\x7c\x47\xaa\xf3\x72\x05\x1e\x23\x8c\x61\xb4\xd9\xe3\xdd\xdc\x70\x2a\xbe\xfa\xe0\xed\xf5\x6c\x2a\x3a\x11\xd0\xb6\x01\xef\x16\x73\x00\x3b\x18\x4a\x09\xe5\xff\x95\xbc\xde\x71\xba\x16\xd3\x2b\x8d\xa0\x1e\xb6\xeb\x50\xf9\x86\x52\xe4\x69\x79\xc3\xcf\x38\x5a\xe6\xe7\x64\x19\xf6\x9b\x1f\x42\x27\xff\x38\x3a\x2d\x6f\x3c\x49\xb1\x23\xe8\x6b\x8b\x2c\x79\x5f\x19\x6d\x2c\x84\x08\x79\xa3\xd9\x5b\xe3\x21\x0c\x43\x5f\xf2\x4e\xcb\x15\x6c\x14\x74\x77\xc7\x89\xa2\xeb\x07\x98\x2e\xf3\xcf\xfc\x33\x17\x75\x04\x5c\x53\x9f\xf1\x3a\xf5\x70\x7f\xc0\xcf\x45\x8a\xb4\x5c\x31\xd4\x8e\x68\xc3\xf4\x1a\x38\x27\x15\xa1\x1e\x5f\x1a\xf2\x8f\x7e\xf0\xca\x17\xd2\xe3\x8e\x6f\x46\x50\x64\xa2\xdb\xfc\x44\x85\x80\xf1\xc7\x55\x33\xa6\xd4\x23\x94\xfa\xdd\x14\x8f\xcb\x12\x23\x45\x96\x07\x78\x52\x07\x3b\xf4\x15\xe4\xd8\x87\x91\xc2\xaf\x51\x32\xe0\x7a\xf1\x2c\x10\x9e\x91\x95\xe7\x92\xc5\x5d\xf5\x80\xfa\x62\xaa\x3c\x6e\x79\x35\x64\x70\x82\xca\x18\xf1\x25\x97\x07\x57\x72\x0d\x37\x0c\x2d\x57\xaa\xff\xae\xdb\x80\x5c\xa1\x93\x02\x6f\x7c\x5b\x4f\xa7\x65\x9c\x4e\x0a\x82\xac\x09\x7c\x48\x86\x68\xb9\x0a\x90\xab\x27\x63\x9b\x6d\x01\xf7\xe5\xd5\x6f\x84\xf7\x57\x0c\xe8\xe7\x03\xf0\xe5\x9f\x8a\x40\xce\x5c\x07\x41\xce\x30\x7f\x02\x78\x3d\x3a\x78\x93\x7d\xdf\xe1\xf1\x4d\xb6\xbf\x2f\xf8\xe0\x58\xca\xae\xd6\xc0\x23\xf5\x13\x45\xb0\x09\x41\xef\xe3\xe2\x41\x50\xeb\x61\x88\x6d\x02\x51\xaf\x56\x17\x35\xef\x66\x04\x41\x07\x13\x95\x53\x5a\x48\x51\x83\x82\x2c\x37\x6c\x2f\xd5\x54\x2b\xd8\x32\xff\x20\x17\xd1\xde\x6b\xca\x9c\xbf\x8f\x05\xb2\xaa\xef\x52\xd1\xae\xc7\x6c\x98\xc1\xa2\xa3\x33\x3b\x73\x34\x80\xfa\xce\x30\x8e\xc1\x5a\xd7\x18\xd3\x63\xea\x54\x5f\x7b\xb2\x75\xc8\xda\x5d\x6a\x1f\xe4\x06\xae\xaf\xd4\xf0\x5b\x73\x9c\x4e\x45\x71\x9e\x6f\xd2\xa0\x9a\xd2\x12\xc8\x81\xc0\x10\x4f\xf8\xc7\xf6\xd5\x6b\xce\x24\x39\x97\x09\xd0\xaf\x1f\x7e\x3a\x3e\xbc\x18\x6b\xaf\xd2\x19\x4e\xdb\xc2\x74\x7c\x01\xbf\x8a\x8c\x44\x68\x40\x6d\x7f\x46\xd2\x63\x99\x71\x7b\xb6\x63\x58\xe3\x79\x7e\x6a\xc5\x1b\x29\xb8\x6d\x5d\x71\xbf\x0d\x47\x1b\xb9\x01\xd5\x13\x8e\x3f\x93\xc4\xf3\x35\x0f\x76\xf8\x78\x24\x24\x48\x57\x14\x81\x40\xdf\x11\xf6\xcd\x63\xb9\x27\xaf\x16\x87\x9b\xc1\x5f\xee\x9e\x02\x70\xeb\x9e\xc7\x51\x37\x00\xb9\x6e\x36\x25\x39\xcf\x81\xcd\x5d\xd2\xe0\x69\xd7\x5d\xd6\x39\xa8\x12\x5f\x6d\xeb\x79\x8f\xb1\x25\x10\xbe\x63\xa9\x46\x56\xa3\xab\x2e\x04\xe8\x1a\xce\xa0\xdd\x09\xa3\xf1\xad\x87\x02\xb3\xb6\x34\xcc\x11\xdb\xee\x20\x7c\x81\x57\xa8\x9d\xd7\xb4\xe6\x3b\xe7\x54\x38\x84\xc5\xbd\x71\x8a\xeb\x0e\x78\x8f\x7b\x3c\x3e\x1d\x5f\x8c\x11\xc8\x5a\x01\x46\xed\xb0\xee\x52\x1d\xf0\xf5\xa1\x8a\x6a\x14\x01\xad\x0b\xe0\x17\xd9\x97\x7b\xc1\xf3\x5c\xe0\x8f\xc2\x3f\xfe\x63\xf9\x80\xe1\x04\xd1\x9e\x74\x84\xf7\x31\x63\x27\x05\x23\xb4\x9a\xf5\xe5\xe3\x37\x1d\xf0\xa4\xc6\x9e\x08\x60\x93\x87\x70\x4f\x50\xec\x0e\x66\x83\x3d\x86\xcd\x64\x90\x1f\x27\x1a\x5b\xec\xb6\xac\xf3\x14\x8a\xb2\x82\x6b\x02\x22\x4b\x7c\x09\x19\xe7\x93\xf0\xf1\x5b\xde\xe0\xb7\x64\xed\xb9\x23\x0e\xe5\x05\x02\x45\x73\x21\xf9\x2a\xd8\x2f\xb1\xa8\x70\xd9\x32\xc7\x3b\xfd\xb8\xcc\xf3\x98\x32\x0f\x9a\x26\x27\x85\xf9\x38\x02\x81\xde\x1c\x60\x96\xe0\x9b\x6a\x35\xa0\x78\x72\x36\x1d\x9f\x5f\xc0\xc9\xd9\xc5\x64\x10\x7a\x9e\x0b\xfb\x5a\x78\xb7\xd7\xb3\x67\x3f\xc5\x34\x5e\xf0\xe3\xcc\x65\xe0\xfa\xf0\xcb\xe1\xe9\x87\xf1\x94\x63\x56\xb2\xbd\x19\xb1\xf7\x52\x28\xfe\x3e\x6c\x45\x98\x00\x0e\x02\xc8\x8b\xbd\xef\x7c\x88\xa2\xef\x60\x9e\x91\x3c\x65\xbd\x28\x80\x79\xb6\x8e\x03\xdc\x14\xd2\x5a\x4e\xd3\xbc\xec\xbd\x1a\xb5\xad\xea\x42\xf1\x33\xb5\xa3\xe3\x37\x4e\x29\xb4\x9e\x12\xde\x4d\x5a\xf5\x32\xcd\x89\xc9\xee\x8e\x15\x8b\x7e\x8b\xbb\xb9\x06\x7a\xd1\xc8\x30\xc2\x82\x3b\x2f\x02\x65\x99\x00\x19\x7a\xba\x27\xe2\xea\xdf\xcb\x13\x1f\xbd\x88\xf6\xba\x7e\x93\x7c\xff\x7c\x61\x96\x0c\xaf\x47\xb0\x56\x38\x8a\x9b\x8b\x0e\xfd\xbe\x68\x1a\xdf\x6f\xbe\xb7\xb4\x57\xf2\xd2\x23\xc1\x38\xd9\xdd\x4b\x7c\x6c\xd9\x1f\xe0\x76\x5d\xbb\xa5\x9c\xa6\x19\x7a\x3e\xe4\x46\xcd\xe6\x00\xfd\x17\x44\xd5\xa2\xcd\xe6\x40\xd7\x21\x61\x74\x38\x1c\x27\x29\x4d\x20\xe1\xb7\xe1\x27\x54\x5c\xbb\xec\x16\x2e\x03\x70\x7f\x50\xe3\x83\x60\x1c\x84\xa2\xea\x3b\x72\x34\xca\xe7\xb7\x81\x07\xc4\xed\xec\x23\xff\xae\xfb\x75\x08\xa0\x7a\xe1\x7f\x36\x17\x5d\xab\x56\x7f\xea\xfa\x00\x78\xfc\x70\x1f\xc0\x0c\xfb\x49\x5c\xf0\x40\x2f\xa2\x3b\xe8\x96\x40\x68\xe5\x2b\x28\xd9\xa4\xae\xd6\x92\x04\x29\x22\x4f\x6e\x9c\xe5\xd0\x8a\xa5\x9e\x4e\x96\xbc\xda\x71\xe5\x49\x59\x51\x95\x1b\x83\x35\xc8\xf3\x78\x9b\xfb\x3e\xce\x6b\xc2\xc4\xf8\x52\x8f\xba\x1b\xeb\x72\xdb\x95\xf5\x2b\x82\x88\x5a\xc9\x32\x57\x71\x89\xdb\x50\x56\xd6\x76\x48\xc2\x45\x2a\x1e\x41\x17\x90\x9e\x5a\x56\x6f\x63\xa0\x0b\x59\x02\x43\xf8\x1f\x5d\x2f\x86\xcd\x38\x66\xe4\xcd\x1b\xa3\xcf\x8f\x71\x95\xdc\x7a\xd7\xf8\xff\xbf\x03\xd0\xdf\x01\xe8\xef\x00\xf4\xd5\x06\x20\xd7\xcb\x0a\xe0\x8e\xea\xbb\xc1\xd7\x18\x8d\x38\x6f\x03\x47\x5b\x5d\xb7\x2e\x30\x6d\x0d\x4d\x8f\x94\xf4\x76\x64\x32\xaa\x07\x27\x25\xdc\x56\x5b\x7f\x35\x89\x98\x12\x10\xe9\xde\xcf\xb3\xa0\x7b\x2b\xff\x29\xa6\x15\x2f\x8d\xcd\x68\x25\xd3\x60\xf9\x83\x9f\x17\x19\x1c\xf8\x5d\x3e\x9d\x92\x5c\xbd\x4b\xdb\x60\x9f\x8d\x97\x1e\x1d\x9e\xea\x52\x6b\xe5\x88\x1d\xad\xc3\x22\x9d\x7d\x01\xbd\x2e\x51\xef\x1e\x62\xb1\xfa\xe9\x09\x1d\x1e\xe5\x35\xab\x08\x5d\x13\xb3\x63\x61\xc3\xf1\xc3\x47\x77\x87\x99\x49\x3b\x12\xb3\xcd\x29\x96\xdb\x30\x14\x19\xba\xe3\xf4\xf2\xf0\xb5\x6b\x6e\x1e\xe7\xcc\xb8\xe7\x7a\xfd\xa1\x5e\xff\x17\x54\xa7\x3b\xab\x08\x55\x20\xc2\x81\x00\x8c\xdf\x48\xcb\x07\x80\x7e\xeb\x1f\x7a\xbd\xff\xae\xac\x5e\x4f\xf1\x79\xe4\xe2\x14\xbf\x87\x57\xc2\x4f\xf4\xcb\x17\xf9\x1f\xdd\xa3\xe6\x1d\x6e\x84\xd8\xc1\x1b\xc8\xe0\x7b\xb1\xe5\x0d\xe8\x16\xf7\x42\xd7\x81\xc3\xbf\x13\x0e\xe0\xd5\x81\x2f\x7b\xe1\xb8\xf4\xdb\x75\x5e\xc4\xef\x16\xb2\x39\xa0\xc8\xe1\xfb\xf8\x6e\x9a\xc4\x85\xb7\x50\x4f\xcc\xce\xa6\xab\x98\xef\xb9\x8f\xf3\x00\xca\x4f\x9c\x8b\xb5\xdf\x95\xb9\x57\x6f\x70\x4e\xfd\xb2\x62\xb0\x5c\x04\xf1\xd4\x20\x7f\x9a\x81\x77\x40\xe8\xe9\x81\x09\xcd\x6e\xb2\x22\xce\xdb\xd6\x57\x3f\x27\x8a\xa2\x4d\x64\xec\xad\xea\xee\x72\xf4\xaf\x54\x3a\xa4\x09\x5e\x8c\x9b\x47\x34\xf6\xc5\x93\x91\xe3\xb4\xa0\x9e\xa6\x1c\xc7\xb9\xa6\x24\xfe\x64\xc6\x2c\x19\x37\xb9\xb2\x8e\xf2\x92\x11\x6f\xe0\x8d\x40\xc5\xac\x7f\x07\x00\x00\xff\xff\x81\xc7\xf2\x82\x37\x33\x00\x00")

func modelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelGoTpl,
		"model.go.tpl",
	)
}

func modelGoTpl() (*asset, error) {
	bytes, err := modelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.go.tpl", size: 13111, mode: os.FileMode(438), modTime: time.Unix(1536668446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _models_typesGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x8a\xdb\x30\x10\xc6\xcf\x16\xe8\x1d\x86\x1c\x4a\xb2\xb8\xf6\x3d\x90\x43\x49\xcb\x42\x5b\x5a\x68\xf6\x16\x42\x50\xec\xb1\xd7\xd4\x91\x1c\x49\xde\x64\x31\x7e\xf7\xa2\x91\xec\xfc\x2d\xeb\x83\x2d\x7d\xf2\xcc\xfc\xe6\x93\xd4\x88\xec\xaf\x28\x11\x4e\x19\x67\x9c\x55\xfb\x46\x69\x0b\x53\xce\x00\x00\x26\xa8\xb5\xd2\x66\xc2\x59\x34\x31\x56\x67\x4a\xbe\x0d\xe3\x4a\x96\x4e\x77\xb3\xb2\xb2\xaf\xed\x2e\xc9\xd4\x3e\x2d\x55\x76\xa8\xfd\x7b\xc2\xd9\xcc\xad\x77\x9d\x16\xb2\x44\x48\x5e\xc4\xae\x46\x03\x7d\xcf\x59\x64\xdf\x1b\x84\xae\x0b\xe2\x2f\xb1\xc7\x67\x05\x7d\x0f\xc6\xea\x36\xb3\x1d\x67\x51\x34\xc6\x2d\x55\xdd\xee\x65\x08\x74\xfa\xe7\x41\xa3\xb8\xdf\x2e\x8e\x52\xbd\x37\x21\x4b\x9a\x92\x70\xfe\xc9\x89\x24\xfd\xa8\x64\x1e\x12\x75\x1d\xca\xdc\x0d\xdd\x64\x8b\xa7\xca\x58\x13\xc3\x36\xc7\x1a\x2d\xe6\xb0\x53\xaa\xe6\x2c\xea\x39\x4b\x9f\x38\x9b\x2f\xe0\xd3\x29\x4b\x1e\x10\x3b\x56\x87\xf4\x08\xf6\x1a\x82\x48\xe7\xd0\x75\x44\xfa\x15\x0b\xd1\xd6\xf6\x59\xf5\x7d\x1c\x52\x60\x60\x7b\x4a\xbd\x6f\x23\x5f\x9a\x42\xad\x4a\x03\x96\x1c\xe4\x8c\xdc\xfb\xa9\x4a\x42\x59\x1e\xea\xb3\x6d\x6e\xd3\x1e\x19\xee\xf5\x3b\x78\xdf\xa4\x5f\xa4\xfa\xbe\x1e\xbd\xde\x84\xbe\xac\xf1\x07\x0f\xb0\xb8\x14\x6e\x1a\xff\xb0\xd8\x1c\xac\x6e\x11\xe2\xbb\x7a\x54\xcd\x35\x79\xfd\xc0\x52\x49\x63\x85\xb4\x06\x6e\x97\x52\x32\x88\x5c\x38\xbe\xa2\xc6\x65\x2d\x5a\x83\xc1\x05\x08\x36\x64\x4a\xe6\x95\xad\x94\x04\x7f\x5a\xbd\x2a\x74\x69\x80\x9e\xf5\xa6\x92\x16\x75\x21\x32\xec\x06\x8a\xa2\x95\xd9\x90\xb2\x35\x68\x5e\xd4\xea\x50\x4f\x49\x30\xb0\xde\x5c\x14\x8b\xfd\x6f\x2b\x6c\x42\xfa\x19\x4c\xfd\x20\xbe\xce\x3c\xa3\x13\xe2\xcc\xf4\x69\xbe\x68\x0d\xeb\xcd\x80\x14\x15\x4a\xc3\x36\x86\x23\xcc\x17\xc1\xc9\x50\x8d\xee\xc0\x39\x64\x01\xa2\x69\x50\xe6\xd3\x51\x8a\xe1\x98\x8c\x3d\xce\xfc\x51\x0d\x01\x2b\xab\x5d\xbe\x70\x4b\x93\xef\xaa\x92\x57\x71\x81\x9c\xae\x27\xa1\x91\x2b\x37\x86\x7c\x80\x46\x21\x23\x95\x9b\x39\x20\xf7\x4d\x92\x64\xc0\xd1\x68\x5b\x2d\x61\xa4\x8a\xa9\x52\x30\xfb\x6e\xc3\xbf\xc9\x1c\x54\xf1\xff\x7d\xff\x17\x00\x00\xff\xff\x1a\xf2\xc4\x4a\xaa\x04\x00\x00")

func models_typesGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_typesGoTpl,
		"models_types.go.tpl",
	)
}

func models_typesGoTpl() (*asset, error) {
	bytes, err := models_typesGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_types.go.tpl", size: 1194, mode: os.FileMode(438), modTime: time.Unix(1536668446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _not_usedGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x6b\xdb\x30\x14\x7d\xae\xc1\xff\xe1\xcc\x4f\x76\xe6\xc8\x7d\xe9\xcb\xc0\x0f\xa3\x0b\xa5\xd0\xa6\x5b\xd3\x95\x41\x29\x45\x75\xae\x13\x53\x59\x8a\x25\x7b\x59\x11\xfa\xef\x43\xfe\xc8\xb2\xb0\xe5\x21\x46\xf7\xe3\xdc\x73\xcf\x3d\x61\x90\xcd\xc2\x20\xcb\xa4\x6a\x51\x2a\x0d\xa9\xf6\x98\xcf\xf1\xda\xb5\x78\x23\xda\xa1\xdd\x56\x26\x0c\xca\x4e\x16\xb8\xe5\xc6\x5c\x4b\x43\xba\x7d\xb1\x96\x3d\xf0\x57\x41\x4b\x5e\xd3\x95\x72\x2e\xd6\x6a\x6f\xf0\xf4\x3c\x3b\x4d\xa4\x30\x64\x4c\xa5\x24\x66\x1b\x55\x34\x82\xad\x86\x67\x02\xd2\x5a\x69\xd8\x30\x00\x80\xaa\x84\x20\xd9\xa3\x24\xc8\x73\x9c\x4f\x09\xff\xd3\xd4\x76\x5a\x0e\x0d\x86\x2d\x69\x1f\x47\xfd\x38\x23\xaa\x82\x60\xb6\xaa\x13\x6b\x78\xfe\xaf\x04\xaa\x77\xed\x3b\xe6\xa8\x7a\x9e\xd4\xc7\xb7\x95\xdc\x44\xc9\x80\xe7\x86\xcf\x4f\xae\x3d\xde\x80\x39\x84\x84\xc4\xa7\xfc\x0f\x8b\x91\x97\x34\x8f\x5c\x18\x9f\xd9\x92\xd8\x91\x66\xab\x46\xdc\x72\xf9\xfe\x45\x09\xc1\xb5\x89\x61\xad\x20\x09\x76\xa9\x44\x57\x4b\x03\xe7\x90\x1e\x30\xd2\x56\x77\x34\x22\x0d\xff\xa6\x11\xa6\xd5\x1e\x2e\xba\x5e\xae\x16\xf7\x0f\xb8\x5e\x3e\xdc\x61\x52\x6d\x55\x6c\xa9\xa6\xbb\xae\x75\x0e\x71\x84\x8f\x07\x0d\x22\x58\x3b\x0d\xf1\xd2\x9a\xaf\x5c\xf3\xba\x1f\x77\x5c\x86\x28\xc1\xe3\xe7\x9b\xef\x8b\x95\x0f\x4f\xec\xc3\x60\x28\xc8\x32\xe8\x4e\xa2\xe9\x48\xbf\x4f\x32\x0c\xbb\xd5\xfc\x8d\xe2\xa7\xe7\x4a\xb6\xa4\x4b\x5e\x90\x75\x29\xce\x53\x08\x39\xbb\x48\x90\x65\x17\x28\x2b\x12\xeb\x03\x90\xf7\xc9\x4b\x0a\xad\xf6\xbe\x59\x73\xb9\x21\xf4\x17\x19\x8f\x76\x66\xed\x7c\x0c\x4f\xc2\xb8\x51\xf8\xb3\xb3\x7e\x66\x0e\xbe\xdb\x91\x5c\xc7\xfe\xd5\x23\x31\x6b\x8f\xf6\xbb\xba\x73\x2e\x39\x02\x23\xb9\x9e\x10\xdc\xc4\xa2\x2a\x71\xa3\x36\xbd\x6e\x97\x8d\xb8\xa7\x86\x9d\x9a\xef\xd8\x44\xe3\xf9\x7e\x5c\xde\xa8\x4d\x1c\x1d\x79\xd9\x9f\x1c\x39\x22\xbf\x6e\x3a\x1d\x28\xf5\xbc\xfe\xb6\x8c\xb7\x4b\x3e\xb9\x99\x7d\xf3\x22\xc6\x43\x75\xda\xeb\xc8\x18\x4b\xd8\xe2\x17\x15\x71\x72\xe0\xe7\x7b\x3e\xe4\x90\x95\xf8\x1f\x95\x85\xd6\x31\x69\x9d\xfc\xcb\xed\x27\xfb\x8e\x09\x59\x89\x30\x70\x61\x30\xcb\xc2\xe0\x77\x00\x00\x00\xff\xff\xae\xa5\x48\xae\xbd\x03\x00\x00")

func not_usedGoTplBytes() ([]byte, error) {
	return bindataRead(
		_not_usedGoTpl,
		"not_used.go.tpl",
	)
}

func not_usedGoTpl() (*asset, error) {
	bytes, err := not_usedGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_used.go.tpl", size: 957, mode: os.FileMode(438), modTime: time.Unix(1536578275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common.go": commonGo,
	"model.go.tpl": modelGoTpl,
	"models_types.go.tpl": models_typesGoTpl,
	"not_used.go.tpl": not_usedGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"common.go": &bintree{commonGo, map[string]*bintree{}},
	"model.go.tpl": &bintree{modelGoTpl, map[string]*bintree{}},
	"models_types.go.tpl": &bintree{models_typesGoTpl, map[string]*bintree{}},
	"not_used.go.tpl": &bintree{not_usedGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

