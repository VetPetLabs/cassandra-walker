// Code generated by go-bindata.
// sources:
// templates/model.go.tpl
// templates/models_types.go.tpl
// templates/not_used.go.tpl
// DO NOT EDIT!

package bind

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modelGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x46\xf2\x7f\x4d\x03\xfe\x0e\x53\x22\xff\x82\xb4\x19\xd2\xf9\x03\xbd\x17\x49\x75\x85\x6b\x2b\x39\x1f\x6c\xab\xb5\x9c\xe6\x0e\x86\xa1\xd2\xd4\xca\xe6\x85\x22\xa5\x5d\xd2\x8a\x41\xf0\xbb\x1f\x66\x9f\xb8\x4b\x51\xb2\xdd\xa4\xd7\x14\xa8\x81\x36\xd2\x3e\xcc\xce\xc3\x6f\x66\x67\x66\xb5\x88\x93\x8f\xf1\x2d\x81\x4f\xc9\xee\xce\xee\x4e\x3a\x5f\x14\xb4\x04\x6f\x77\x07\x00\xc0\x25\x94\x16\x94\xb9\xbb\x3b\x8e\x3b\x67\x11\xab\xf2\x88\xdd\xc5\x94\x4c\xa3\x3b\x92\x2d\x08\xe5\x13\xac\xa4\x49\x91\xdf\xab\xcf\x69\x7e\x8b\x1b\xf0\xdb\x6d\x5a\xde\x55\x37\x61\x52\xcc\xa3\xdb\x22\x59\x66\xe2\xff\xee\xee\x8e\x8f\xf3\xd1\x93\xff\xe0\xe7\x8a\xd0\x07\x60\x24\x23\x65\x41\xa1\x5a\x4c\xe3\x92\x50\x88\xf3\x29\x4c\x71\x8c\x50\xd8\xb8\x17\x4f\x9a\x55\x79\x02\x5e\x0c\x7b\x75\x1d\x5e\xc6\x37\x19\x39\x8f\xe7\xe4\x5d\xd1\x34\x3e\x0c\x3f\xa5\xac\x64\x9e\x0f\x37\x45\x91\x41\xbd\xbb\xe3\x50\x52\x56\x34\x87\x38\x9c\x10\x3e\xb7\xbb\xd3\x3c\x42\xe3\x98\xf3\x30\xed\x27\x22\x18\x9c\x4a\x2a\xbb\x3b\x75\xfd\x12\x5e\x48\xae\x2f\x1f\x16\x04\x5e\x0f\x60\x41\xd3\xbc\x9c\x81\x3b\x99\xfc\x1f\x9b\x08\x6a\xd4\x05\xfb\x18\xb9\x53\xca\xde\xbb\xf3\xbd\x98\xdb\xb0\x13\xb5\x97\x94\x45\xff\xd6\xb1\x9c\x5c\xdf\xbb\xbb\x53\xe2\x86\xba\xb6\x29\x34\x0d\xb0\x92\x56\x49\x89\xe2\x22\x54\x56\x77\x84\x12\x06\xfc\xef\xea\x9a\x7f\x3b\xca\xe2\x8a\x11\x31\x2d\xf6\x1e\x15\x19\x9f\x16\x30\x11\x33\x05\x9d\x12\xfa\xe3\x83\xdc\x28\x66\x20\x8a\x5c\x31\x01\x37\x0f\x90\xa2\x99\x59\x02\x51\x34\x2b\x28\xa4\x39\xda\x04\x57\x67\xe9\x3c\x2d\xc5\x89\x38\x2a\x06\xe3\x2c\x2b\x56\x6f\xd3\x0c\x41\x81\xe6\x90\x8a\xd7\x42\x98\x0a\xdc\x2c\x44\x8f\x04\x62\x23\x03\x98\xc7\x8b\x2b\xc1\xe6\x75\x9a\x97\x84\xce\xe2\x84\xd4\x4d\xf7\x1c\xd3\xc4\xcf\x55\x96\xd8\xdb\x55\x96\x3c\xa1\xd7\x41\xfe\x53\xb1\x12\x94\x11\x15\x58\x2b\x04\xeb\x9a\xd9\x7c\x38\x45\xbd\x79\x42\x7b\x69\x5e\xfa\xbd\xcb\x24\xa7\x55\x28\xd6\x0d\x84\xb6\xc5\xa0\x44\x77\x65\xb9\x46\xef\x69\x3e\x1c\xb6\xf6\x48\xf3\x5b\xcf\x87\xed\xa7\x99\xe6\x1b\x40\x49\x2b\xd2\x7b\xa4\x3c\xf4\x9c\xac\xba\xee\xa8\xa1\xec\x6d\x97\x0b\x5d\xa0\x6f\xba\xb1\xce\xfb\xd6\x92\xb1\xef\x38\xe9\x74\xea\x34\x03\x5e\x3d\x87\x75\x66\x1b\x25\xb5\xc2\xd6\x00\xe6\xf1\x47\xe2\xf5\x23\xcc\x7f\x26\x67\x32\x90\x28\xce\x0c\x40\xf6\x70\xd6\x99\xdd\xa0\x85\x28\x22\x71\x72\x27\x9d\x19\x92\x22\xab\xe6\x39\xc3\xf8\x02\x34\xce\x6f\x09\x84\x47\x62\x08\x30\x72\x6c\x85\x85\xb0\xd2\xa4\xae\xd5\x1e\xce\xf6\x08\x9a\xe6\x11\xbb\x85\x6d\x24\x19\x40\xbc\x58\x90\x7c\xea\x19\x83\x01\xb8\x75\x6d\x90\x6c\x1a\x17\xfc\x1e\x08\x49\x49\x84\x08\x22\xd4\x30\x88\x22\xee\x47\x22\xc2\x6c\x65\x1f\x46\x22\x6a\xf5\x09\x30\x39\x26\x2c\x79\x4c\x0a\x15\xf5\x0c\x19\xe4\x50\x00\x2e\x74\x44\x80\xe3\xe1\xf8\xc8\xed\x13\xe3\x11\x36\xb7\x71\x79\xf8\xa5\x99\x3c\xdc\xc8\x63\x5d\x03\xc9\xa7\xd0\x3c\x12\xbf\x24\x60\xbb\xc6\x11\xd0\x7c\x12\xca\x2c\x14\xab\x8b\x79\x1b\xc8\xfa\x9d\x22\x6c\x03\xb0\x21\xba\x1e\xec\xc1\x58\x9f\xdc\x86\xd4\xbd\x32\x0f\xf3\x29\x14\xb3\x8e\xe8\xdb\xf4\x23\x43\xcd\xf3\xf4\xe3\xd4\x75\x3a\x03\x8f\x2c\x21\x44\x29\xdf\x15\xe0\xa6\x79\xe9\xfa\x7c\xce\xb1\xb4\x67\x45\x27\x1f\xfa\xd4\x96\x93\xd5\x2f\x71\x26\x6e\x8d\x0d\x01\xcf\x71\xac\x98\x76\xd5\xd5\x15\x0c\xe0\x07\x70\xaf\x61\x00\x82\x98\xda\x61\x28\xcf\x71\x04\xe3\x24\x63\x04\xba\xdc\x8b\xc0\xf8\x99\x02\x08\x22\x9b\x62\xf6\xef\x2d\xc2\xd5\xf5\xcd\x43\x49\x3e\x53\x04\x41\xe4\xf7\x15\xc1\x71\xb8\x10\x1a\xc7\x4f\x81\xb4\x0d\xd5\xba\x7e\x51\xe2\xad\x84\xf7\x4c\xa8\x68\x08\x98\x7a\x73\x36\x29\x8b\x09\xcb\xd2\x84\xd8\xf9\x92\x95\xa4\x59\xd1\xc9\x57\x98\x86\x17\xc5\x82\xd0\xb8\x4c\x8b\x5c\x25\xb4\xa1\x9e\x13\xf4\xc5\xc1\xb6\x33\xf0\x9d\x49\x91\x19\xeb\x71\x68\x95\x96\x77\x10\xbe\x23\xe5\x59\x31\x4d\x67\x29\xde\x05\x62\xae\xa5\xa6\x56\x3b\x4e\x14\xd5\x75\xa8\xbe\xd4\x35\xb7\x6e\x41\xb9\x85\x91\xb4\xe5\x66\xe0\xaf\x8f\x4b\x00\x83\x0f\xbe\xa6\x29\x41\x30\x15\xd6\xb4\x45\x53\x38\x78\x5b\xe5\x09\x1a\x0f\xd3\x49\xef\x3e\xce\xa0\xae\x0d\xba\xb8\x6a\xaf\xae\xed\xbd\x0a\x0b\x8e\x30\xee\x0a\xc5\x36\xb2\xcd\xba\x31\x26\xef\x63\xcc\xad\xd9\x07\x9c\x86\x2b\x3b\xb5\xd5\x8b\xf4\x02\x1d\x17\xd5\x48\x70\x1f\x67\xbe\x79\x56\x18\xd3\x5b\xcc\x68\xd4\x02\x6b\x2e\x29\xf2\x69\x8a\x5c\xc2\x80\x07\xd3\xc3\x7c\x3a\xa2\xc8\xad\x30\x8f\x01\x55\xe0\xa3\xe1\x91\xda\xd0\x34\x08\x5c\x83\xd8\x34\x94\xd9\xb4\x66\x49\x8d\x04\xb0\xe2\x85\x26\x5f\xaa\x4a\xb2\xa9\xfc\xae\xed\x47\xf2\xa9\xb6\xb5\xfe\xcc\x3f\x6a\x3c\xf5\xc0\xff\x19\xe5\x2b\x6a\x00\xb0\x72\x89\xb3\xac\xa7\x4e\xfd\xb3\x78\xc4\x49\xbe\xcd\x29\xea\x3a\xda\x83\x10\xf6\xa2\xaf\xc1\x31\xc2\x30\xfc\x03\x7c\x03\x4d\x3c\x09\xe0\x1e\x09\x09\xf5\xdc\xc7\x99\x4c\x29\xf0\x8f\x2f\xdc\xe2\x40\x70\x2f\xb3\x08\x13\x9f\x5f\xdc\x97\x4e\xce\xc1\x73\x61\x1f\x44\x03\x27\x3c\xbe\xf9\xb9\x22\x0c\x77\xbf\x2d\xe8\x78\x99\x9d\xe4\x5e\x46\x72\xd4\xa2\xef\xc3\x3e\xb8\xfe\x9f\xc9\xd7\x54\x4a\x85\x50\xed\x5f\xf1\x08\x29\x60\x65\x4c\x4b\x24\xc1\xa5\x82\x24\xab\x62\x46\xd8\x73\x58\x18\x2b\x0a\xb2\x48\xea\xe3\x61\x63\xce\xce\x21\x3d\x29\x8b\xf1\x32\xf3\x7c\xf0\x84\x43\x04\x16\xe0\x7c\x44\xed\xee\x8e\xc3\x96\xd9\x07\xa5\x79\xfc\xf7\x10\x11\xd2\x42\xb8\x62\x84\x5d\x72\x3a\x95\xb6\x90\x8b\x69\xaa\xa3\x4b\x25\xbe\xdc\xdd\x43\xfb\xa6\x33\x40\xab\x1b\x75\x94\x0f\x7f\x87\x03\xe1\x20\xc6\x86\x81\x4c\x9c\x58\xf8\xcf\x22\xcd\x3b\x75\x57\x00\x9c\x7e\x23\x98\x63\x25\xe5\xf4\xc7\xc3\xd3\xe1\xd1\x25\x20\xe4\x0c\x42\xfb\xe0\xc2\xdb\x8b\xd1\x19\x07\xa9\x88\x4a\xbc\x78\x1d\x27\x77\x64\x4e\x46\x55\x09\x4d\x23\x9a\x88\x92\x35\x75\xee\x25\x4d\xe7\x9e\x21\xbb\x0b\xae\x2f\x79\x85\x28\xfa\x7f\xee\x84\x2c\x9e\x95\x0f\x9c\x73\xc1\xc6\xfe\x00\x5c\xf8\xf0\x8f\xe1\xc5\x50\xb0\xa1\x76\x0b\x66\x4d\xf1\x65\x75\x63\x08\x2f\x2b\xc3\xd7\x6b\x92\xb7\x85\x90\x94\xdb\x3a\x6d\x74\x71\x3c\xbc\x80\x1f\xff\xcd\x0f\x14\x34\xcc\xd3\x54\x57\xe5\x9b\x81\x56\xb2\xb1\xf9\xf4\xe4\xec\x44\x6a\x4c\xb4\x56\xc3\x93\xb2\x88\x3d\xb9\x49\xe9\x98\x93\x31\xdb\x25\x6b\x74\xe0\xf0\xf4\x74\xf4\x01\xde\x9e\x9c\x5e\x0e\x2f\x4e\xce\xdf\xb9\x72\x67\xdb\x9f\x14\xab\x0d\x04\xad\x17\x95\x6b\x35\xe5\x3b\x52\x5e\x14\x2b\xf0\x18\x61\x0c\x83\xce\x1e\x6f\xea\x86\x63\xf1\xd5\x07\x6f\xaf\x63\x53\xd1\x90\x80\xa6\x09\x78\x37\x99\x03\xd8\xc1\x88\x4a\x28\xff\xaf\xe0\x65\x8f\xd3\x76\x9a\x5e\x69\x04\x75\xb0\x5d\x85\xca\x37\x94\x22\x4f\x8b\x5b\x7e\xc6\xd1\x32\xbb\x20\xcb\xb0\xdb\x03\x11\x3a\x91\xa1\xee\x5f\x47\xa7\xc5\xad\x27\x09\xb7\x74\x7d\x6d\x98\x25\xef\x32\xa3\xa9\x85\x2c\x21\x6f\x3b\x7b\x6b\xac\x84\x61\xe8\x4b\x11\x68\xb1\x82\x8d\xf2\xee\xee\x38\x51\x74\xf3\x00\xe3\x65\xf6\x89\x7f\xe6\x12\x0f\x80\x2b\xec\x13\x5e\xae\x1e\xee\x0f\xf8\xb9\x48\x91\x16\x2b\x86\x4a\x12\x4d\x99\x4e\x3b\xe7\xa4\x24\xd4\xe3\x4b\x43\xfe\xd1\x0f\x5e\xf9\x42\x09\xb8\xe3\x9b\x01\xe4\xa9\xe8\x3d\x3f\x51\x2f\x60\xfc\x99\x1a\x1a\x52\xea\x11\x4a\xfd\x76\x05\x8f\xd2\x12\x31\x79\x9a\x05\x78\x60\x0b\x42\xf4\x1c\x64\xdc\x87\x81\x42\xb3\x51\x47\xe0\x7a\xf1\x88\x10\x9e\x93\x95\xe7\x92\xf9\xa2\x7c\x40\xb5\x31\x55\x33\x37\xbc\x44\x32\x18\x42\x9d\x0c\xf8\x92\xab\x83\x6b\xb9\x86\xdb\x87\x16\x2b\xd5\x94\xd7\xbd\x41\xae\xd7\x51\x8e\x69\x80\xad\xae\xd3\x22\x9e\x8e\x72\x82\xac\x09\xb4\x48\x86\x68\xb1\x0a\x90\xab\x27\x23\x9d\x6d\x81\xfa\xd5\xf5\x6f\x04\xfb\xd7\x0f\xef\xe7\xc3\xf1\xe5\x1f\x81\x47\xce\x63\x0b\x48\xce\x37\x7f\x25\x78\x3d\x38\x78\x93\x7e\xdf\xa2\xf3\x4d\xba\xbf\x2f\xd8\xe1\xc8\x4a\xaf\xd7\xa0\x24\xd5\x14\x45\xb0\x09\x4f\x67\x71\xfe\x20\xa8\x75\x10\xc5\x36\x41\xaa\x53\xce\x8b\xb2\x78\x33\x9e\xa0\x05\x8d\x4a\x3b\x2d\xdc\xa8\x41\x41\x96\xdb\xb7\x93\x8d\xaa\x15\x6c\x99\xbd\x97\x8b\x68\xe7\xc1\x65\xc6\x9f\xd0\x02\x59\xf8\xb7\xd9\x6a\xdb\x86\x36\xac\x61\xd1\xd1\x59\x9f\x39\x1a\x40\xb5\x30\x8c\x63\xb0\xd6\xf6\xce\xf4\x98\x3a\xd5\xd7\x7e\x6d\x1d\xb2\x76\xcf\xda\x07\xb9\x81\xeb\x2b\x35\xfc\xd6\xfc\xa7\x55\x51\x9c\x65\x9b\x34\xa8\xa6\xb4\x04\x72\x20\x30\xc4\x13\x6e\xb2\x7d\xf5\x9a\x4f\x49\xce\x65\x72\xf4\xeb\xfb\x9f\x8e\x0f\x2f\x87\xda\xb9\x74\xf6\xd3\x34\x30\x1e\x5e\xc2\xaf\x22\x5b\x11\x1a\x50\xdb\x9f\x91\x10\x59\x66\xdc\x9e\x09\x19\xd6\x78\x9e\xbb\xf6\x45\x1f\x29\xbf\x6d\x64\x71\xf7\xf5\xc7\x1e\xb9\x01\xb5\x14\x0e\x3f\x91\xc4\xf3\x35\x2b\x76\x30\x79\x5a\x80\x90\x8e\x29\xc2\x82\xbe\x3f\xec\x5b\xc9\x72\x56\x5e\x5e\xf6\x77\x8f\x3f\xdf\x59\x05\xfc\xd6\xfd\x90\x63\xb0\x07\x80\xed\xec\x94\x64\x3c\x5b\x36\x77\x49\xf3\x4f\xdb\x76\xb4\xce\x56\x95\xf8\x6a\x5b\xc7\x97\x8c\x2d\x81\xf0\x24\x4b\x35\xb2\x7c\x5d\xb5\x01\x41\x57\x7b\x06\xed\x56\x18\x8d\x76\x3d\x14\x98\xc5\xa8\x61\x8e\xd8\x76\x0e\xe1\x19\xbc\xa4\x6d\x7d\xa8\x31\x1f\x46\xc7\xc2\x3d\x2c\xee\x8d\x53\x5c\xb7\xc7\x97\xdc\xe3\xe1\xe9\xf0\x72\x88\xb0\xd6\x0a\x30\xaa\x8c\x75\x07\x6b\xdd\x40\x1f\xaa\xa8\x46\x11\xd0\x2a\x07\x7e\xbb\x7d\x31\x9f\x78\x9e\x43\xfc\xce\xde\x80\xff\x58\x1e\x61\xb8\x44\xb4\x27\xdd\xe2\x2c\x66\xec\x24\x67\x84\x96\x93\xae\xb4\xfc\x16\x04\x9e\xfe\xd8\x13\x01\x6c\xf2\x17\xee\x17\x8a\xeb\xde\xbc\xb1\xc3\xb0\x99\x36\xf2\xe3\x44\x5f\x8c\xdd\x15\x55\x36\x85\xbc\x28\xe1\x86\x80\xc8\x27\x5f\x42\xca\xf9\x24\x7c\xfc\x8e\xbf\x0f\x58\xb2\x76\x9c\x13\x87\xb2\x1c\x61\xa3\xb9\x90\x7c\xe5\xec\x97\x58\x54\xc6\x52\xa9\xe3\x65\x86\xd7\xfe\x71\x91\x65\x31\x65\x1e\xd4\x75\x46\x72\xf3\x89\x05\x02\x4d\x23\xc0\x44\xc2\x37\xb5\x6b\xe0\xf3\xe4\x7c\x3c\xbc\xb8\x84\x93\xf3\xcb\x51\x2f\x1e\x3d\x17\xf6\xb5\x0e\xdc\x4e\xe7\x9f\xfd\x14\xd3\x78\xce\x8f\x33\x97\x81\xeb\xc3\x2f\x87\xa7\xef\x87\x63\x0e\x64\xc9\xfd\x66\x18\xdf\x4b\xd9\xf8\x2b\xb3\x15\x76\x02\x38\x08\x20\xcb\xf7\xbe\xf3\x21\x8a\xbe\x83\x59\x4a\xb2\x29\xeb\x84\x06\x4c\xcc\x75\x70\xe0\x16\x91\x46\x73\xea\xfa\x65\xe7\xed\xa9\x69\x54\x2f\x8b\x9f\xa9\xbd\x1f\xbf\x71\x4a\xa1\xf5\x20\xf1\x6e\xd4\xa8\xf7\x6d\x4e\x4c\x36\x87\xac\x00\xf5\x19\x3e\xe8\x1a\x58\x46\x93\xc3\x00\xcb\xf6\x2c\x0f\x94\x81\x02\xe4\xeb\xe9\xee\x89\xab\xbf\xb0\x7b\x3e\x7a\x57\xed\xb5\xcd\x2b\xf9\xa6\xfa\xc2\xac\x38\x5e\x0f\x60\xad\xfc\x14\x97\x1b\xed\xfb\xcd\xd2\x38\xbe\xdf\x7c\xb5\x69\x57\xe5\x95\x4b\x82\xa1\xb4\xbd\xba\xf8\xd8\xb2\x3b\xc0\xad\xbc\x76\x91\x39\x75\xdd\xf7\x24\xc9\x4d\x9c\xce\x00\xba\xaf\x92\xaa\xed\x9b\xce\x80\xae\x03\xc4\x68\x97\x38\x4e\x52\x98\xb0\xc2\x6f\xfd\xcf\xb2\xb8\x76\xd9\x2e\x5c\x06\xe0\xfe\xa0\xc6\x7b\xa1\xd9\x0b\x4c\xd5\xc4\xe4\xd8\x94\x4f\x7a\x3d\x8f\x92\xdb\xd9\x47\xfe\x5d\xf7\xeb\x10\x40\xf5\xd7\xff\xd7\x5c\xb4\x7d\x5f\xfd\xa9\x6d\x23\xe0\xf1\xfd\x6d\x04\xf3\x2e\x48\xe2\x9c\x47\x7f\x11\xf2\x41\x77\x14\x42\x2b\xa5\x41\xc9\x46\x55\xb9\x96\x47\x48\x11\x79\xfe\xe3\x2c\xfb\x56\x2c\xf5\x74\xb2\xe4\xe5\x91\x2b\x4f\x4a\xf3\xb2\xd8\x18\xba\x41\x9e\xc7\x7b\xe6\xf7\x71\x56\x11\x26\xc6\x97\x7a\xd4\xdd\x58\xd6\xdb\xae\xac\x5f\x26\xac\x18\x96\x2c\x33\x15\xa5\xb8\x29\x65\x61\x6e\x07\x28\x5c\xa4\xa2\x13\xb4\xe1\xe9\xa9\x55\xf9\x13\xf8\x68\x03\x98\x40\x14\xfe\x47\xd7\x6b\x69\x33\xaa\x19\x89\xf6\xc6\x58\xf4\x63\x5c\x26\x77\xde\x0d\xfe\xff\xaf\x70\xf4\x57\x38\xfa\x2b\x1c\x7d\xed\xe1\xc8\xf5\xd2\x1c\xb8\xbf\xfa\x6e\xf0\x15\xc7\x26\xce\x62\x0f\x07\x56\x0b\xaf\x0d\x53\x5b\x03\xd5\x23\x1d\x01\x3b\x4e\x19\xe5\x86\x33\x25\xdc\x72\x5b\x7f\xa5\x89\x08\x13\x80\x69\xdf\xeb\xd3\xa0\x7d\x9b\xff\x29\xa6\x25\xaf\xac\xcd\xd8\x25\x13\x66\xf9\x03\xa3\x17\x29\x1c\xf8\x6d\xe6\x3d\x25\x99\x7a\x07\xb7\xa1\x3f\x19\x2e\x3d\xda\x3f\xd5\x26\xe1\xca\x2d\x5b\x5a\x87\xf9\x74\xf2\x19\xf4\xda\x94\xbe\x7d\xf1\xc5\x3a\xa9\x23\x74\x78\x94\x55\xac\x24\x74\x4d\xcc\x96\x85\x0d\xc7\xf7\x1f\xdd\x1e\x66\xe6\xf5\x48\xcc\x36\xa7\x58\x6e\xa3\x51\x24\xf1\x8e\xd3\xc9\xd1\xd7\x2e\xbd\x59\x9c\x31\xe3\xd6\xeb\xb4\x97\x3a\xcd\x64\x50\xdd\xf3\xb4\x24\x54\x81\x08\x07\x02\x30\x7e\x93\x2d\xdf\x16\xba\xaf\x0a\xd0\x79\x56\x68\xeb\xf0\xf5\xf4\x9f\xc7\x31\x4e\xf1\x7b\x78\x25\xdc\x45\x3f\xb1\x91\xbf\xe9\x86\x37\x6f\x97\x23\xc4\x0e\xde\x40\x0a\xdf\x8b\x2d\x6f\x40\xf7\xcb\xe7\xba\x62\xec\xff\x5d\x72\x00\xaf\x0e\x7c\xd9\x58\xc7\xa5\xdf\xae\xf3\x22\x7e\x27\x91\xce\x00\x45\x0e\xcf\xe2\xc5\x38\x89\x73\x6f\xae\xde\xb2\x9d\x4d\x17\x33\xdf\x73\x1f\x67\x01\x14\x1f\x39\x17\x6b\xbf\x63\x73\xaf\xdf\xe0\x9c\xfa\x25\x47\x6f\x61\x09\xe2\xf9\x42\xfe\x14\x04\x6f\x84\xd0\xd3\x03\x23\x9a\xde\xa6\x79\x9c\x35\x8d\xaf\x7e\xbe\x14\x45\x9b\xc8\xd8\x5b\xd5\x4d\xe6\xe8\x5f\xc5\xb4\x48\x13\xbc\x18\xf7\x90\x78\x25\x10\xaf\x51\x8e\xd3\x80\x7a\xf5\x72\x1c\xe7\x86\x92\xf8\xa3\x19\xb3\x64\xf8\xe4\xca\x3a\xca\x0a\x46\xbc\x9e\x07\x07\x15\xb3\xfe\x1b\x00\x00\xff\xff\x7e\xb8\xf4\xba\xc0\x33\x00\x00")

func modelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelGoTpl,
		"model.go.tpl",
	)
}

func modelGoTpl() (*asset, error) {
	bytes, err := modelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.go.tpl", size: 13248, mode: os.FileMode(438), modTime: time.Unix(1536382669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _models_typesGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xcf\x8a\xdb\x30\x10\xc6\xcf\x36\xe8\x1d\x86\x1c\x4a\xb2\xb8\xd6\x3d\x90\x43\x49\xcb\x42\x5b\x5a\xe8\xee\x6d\x59\x82\x62\x4f\x1c\x53\x45\x72\x24\x79\x93\xc5\xf8\xdd\x8b\x46\xb2\xf3\xb7\xac\x0f\xb6\xf4\xc9\x33\xf3\x9b\x4f\x52\x23\x8a\xbf\xa2\x42\x38\x16\x2c\x65\x69\xbd\x6b\xb4\x71\x30\x65\x29\x00\xc0\x04\x8d\xd1\xc6\x4e\x58\x9a\x4c\x76\x96\xdb\x56\x71\xbb\x15\x06\x4b\xbe\x45\xd9\xa0\xa1\x05\xeb\x4c\xa1\xd5\xdb\x30\xae\x55\xe5\x03\xfc\xac\xaa\xdd\xb6\x5d\xe7\x85\xde\xf1\x4a\x17\x7b\x19\xde\x13\x96\xce\xfc\x7a\xd7\x19\xa1\x2a\x84\xfc\x59\xac\x25\x5a\xe8\x7b\x96\x26\xee\xbd\x41\xe8\xba\x28\xfe\x12\x3b\x7c\xd4\xd0\xf7\x60\x9d\x69\x0b\xd7\xb1\x34\x49\xc6\xb8\xa5\x96\xed\x4e\xc5\x40\xaf\x7f\x1e\x34\x8a\xfb\xed\xe3\x28\xd5\x7b\x13\xb3\x70\x4e\xc2\xe9\x27\x2f\x92\xf4\xa3\x56\x65\x4c\xd4\x75\xa8\x4a\x3f\xf4\x93\x15\x1e\x6b\xeb\x6c\x06\xab\x12\x25\x3a\x2c\x61\xad\xb5\x64\x69\xd2\xb3\x94\x3f\xb0\x74\xbe\x80\x4f\xc7\x22\xbf\x43\xec\x59\x3d\xd2\x3d\xd8\x4b\x08\x22\x9d\x43\xd7\x11\xe9\x57\xdc\x88\x56\xba\x47\xdd\xf7\x59\x4c\x81\x91\xed\x81\x07\xdf\x46\x3e\xce\x41\xea\xca\x82\x23\x07\x59\x4a\xee\xfd\xd4\x15\xa1\x2c\xf7\xf2\x64\x9b\xdf\xcd\x7b\x86\x07\xfd\x06\x3e\x34\x19\x16\xa9\x7e\xa8\x47\xaf\x37\x61\xce\x6b\xfc\xc1\x3d\x2c\xce\x85\xab\xc6\x3f\x2c\x36\x07\x67\x5a\x84\xec\xa6\x1e\x55\xf3\x4d\x5e\x3e\xb0\xd4\xca\x3a\xa1\x9c\x85\xeb\x25\x4e\x06\x91\x0b\x87\x2d\x1a\x5c\x4a\xd1\x5a\x8c\x2e\x40\xb4\xa1\xd0\xaa\xac\x5d\xad\x15\x84\xd3\x1a\x54\x61\x2a\x0b\xf4\xbc\xbc\xd6\xca\xa1\xd9\x88\x02\xbb\x81\x62\xd3\xaa\x62\x48\xd9\x5a\xb4\xcf\xfa\x69\x2f\xa7\x24\x58\x78\x79\x3d\x2b\x96\x85\xdf\x9e\xb0\x89\xe9\x67\x30\x0d\x83\xec\x32\xf3\x8c\x4e\x88\x37\x33\xa4\xf9\x62\x0c\xbc\xbc\x0e\x48\xc9\x46\x1b\x58\x65\x70\x80\xf9\x22\x3a\x19\xab\xd1\x1d\x38\x85\x2c\x40\x34\x0d\xaa\x72\x3a\x4a\x19\x1c\xf2\xb1\xc7\x59\x38\xaa\x31\xe0\xc9\x19\x9f\x2f\xde\xd2\xfc\xbb\xae\xd5\x45\x5c\x24\xa7\xeb\x49\x68\xe4\xca\x95\x21\x1f\xa0\x51\xc8\x48\xe5\x67\x1e\xc8\x7f\xf3\x3c\x1f\x70\x0c\xba\xd6\x28\x18\xa9\x32\xaa\x14\xcd\xbe\xd9\xf0\x6f\xaa\x04\xbd\xf9\xff\xbe\xff\x0b\x00\x00\xff\xff\xbe\xc6\xd8\x42\xc3\x04\x00\x00")

func models_typesGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_typesGoTpl,
		"models_types.go.tpl",
	)
}

func models_typesGoTpl() (*asset, error) {
	bytes, err := models_typesGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_types.go.tpl", size: 1219, mode: os.FileMode(438), modTime: time.Unix(1536382670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _not_usedGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6b\xdb\x40\x10\x3d\x5b\xa0\xff\x30\xd5\x49\x72\x95\x55\x2e\xb9\x14\x74\x28\xae\x09\x06\xc7\x6e\x63\x37\x14\x42\x08\x1b\x79\x64\x8b\xae\x76\xad\x59\xa9\xae\x59\xf6\xbf\x97\xd5\x87\xab\x9a\xc6\x07\x8b\x9d\x8f\x37\x6f\xde\x3c\xdf\x4b\xa6\xbe\x97\x37\x32\x83\x07\xae\xf5\x42\x6a\xa4\xfa\xd5\x18\xb6\xe5\x6f\x02\x57\xbc\xc4\x7b\x65\x6d\x48\xea\xa4\xe1\xf9\x65\x7a\x9d\x88\x41\xa3\xd6\x85\x92\x30\xdd\xab\xac\x12\x6c\xd3\x3d\x23\x40\x22\x45\x60\x7c\x0f\x00\xa0\xc8\x41\xa0\x6c\x51\x22\x48\x53\xb8\x1d\x12\xee\x47\x58\x37\x24\xbb\x06\xcd\x56\x78\x0a\x83\x76\x9c\x16\x45\x86\xa0\x0f\xaa\x11\x3b\x90\xaa\x86\x37\x04\x2c\x8f\xf5\x19\x6e\xa0\x68\x79\x62\x1b\x3f\x14\x72\x1f\x44\x1d\x9e\xed\x3e\xbf\x38\x39\xbc\x0e\xb3\x0b\x09\x09\x9f\xd2\xbf\x2c\x7a\x5e\x52\x3f\x71\xa1\x5d\xe6\x80\xe2\x88\xc4\x36\x95\x78\xe0\xf2\xfc\x45\x09\xc1\x49\x87\x60\x8c\x40\x09\x6c\xa6\x44\x53\x4a\x0d\xd6\x42\x7c\xc1\x88\x6b\x6a\xb0\x47\xea\xfe\x75\x25\x74\x4d\x0e\x2e\x58\xac\x36\xf3\xc7\x2d\x2c\x56\xdb\x35\x0c\xaa\x6d\xb2\x03\x96\xb8\x6e\x6a\x6b\x21\x0c\xe0\xe3\x45\x83\x00\x8c\x19\x86\x38\x69\xf5\x57\x4e\xbc\x6c\xc7\x8d\xcb\x20\x88\xe0\xe9\xf3\xf2\xfb\x7c\xe3\xc2\x03\x7b\xdf\xeb\x0a\x92\x04\xa8\x91\x50\x35\x48\xe7\x41\x86\x6e\xb7\x92\xff\xc4\xf0\xf9\xa5\x90\x35\x52\xce\x33\x34\x36\x86\xdb\x18\x84\x9c\xde\x45\x90\x24\x77\x90\x17\x28\x76\x17\xa0\x5c\x11\xbc\xc6\x40\xea\xe4\x9a\x89\xcb\x3d\x42\x7b\x91\xfe\x68\x13\x63\x6e\xfa\xf0\x20\x8c\xed\x85\x9f\x4c\xda\x99\x29\xf0\xe3\x11\xe5\x2e\x74\xaf\x16\x89\x19\x33\xda\xef\x7e\x6d\x6d\x34\x02\x43\xb9\x1b\x10\xec\xc0\xa2\xc8\x61\xa9\xf6\xad\x6e\xb3\x4a\x3c\x62\xc5\xae\xcd\x37\x36\x51\x7f\xbe\x1f\xb3\xa5\xda\x87\xc1\xc8\xcb\xee\xe4\x90\x42\xe0\xd6\x8d\x87\x03\xc5\x8e\xd7\xbf\x96\x71\x76\x49\x07\x37\xb3\x6f\x4e\xc4\xb0\xab\x8e\x5b\x1d\x19\x63\x11\x9b\xff\xc6\x2c\x8c\x2e\xfc\x5c\xcf\x87\x14\x64\x21\xde\xa3\x32\x27\x0a\x91\x28\xfa\x9f\xdb\xaf\xf6\xed\x13\xb2\x10\xbe\x67\x7d\x6f\x9a\xf8\xde\x9f\x00\x00\x00\xff\xff\x1b\xf9\x9f\x70\x9d\x03\x00\x00")

func not_usedGoTplBytes() ([]byte, error) {
	return bindataRead(
		_not_usedGoTpl,
		"not_used.go.tpl",
	)
}

func not_usedGoTpl() (*asset, error) {
	bytes, err := not_usedGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_used.go.tpl", size: 925, mode: os.FileMode(438), modTime: time.Unix(1536382670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"model.go.tpl": modelGoTpl,
	"models_types.go.tpl": models_typesGoTpl,
	"not_used.go.tpl": not_usedGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"model.go.tpl": &bintree{modelGoTpl, map[string]*bintree{}},
	"models_types.go.tpl": &bintree{models_typesGoTpl, map[string]*bintree{}},
	"not_used.go.tpl": &bintree{not_usedGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

