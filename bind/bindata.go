// Code generated by go-bindata.
// sources:
// templates/common.go
// templates/model.go.tpl
// templates/models_types.go.tpl
// templates/not_used.go.tpl
// DO NOT EDIT!

package bind

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commonGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5d\x6f\xe3\x36\x10\x7c\x16\x7f\xc5\x94\x68\x11\x09\x56\xe5\xe4\x35\x89\x7b\x68\xd3\x3b\xa0\x45\xae\xe8\xd5\x45\x5b\xc0\x08\x0e\xb4\x4c\xa9\x74\x69\xd2\x21\xa9\x38\x6e\xe0\xff\x7e\x58\x8a\xf2\x29\x9f\x7a\xb1\x49\xce\xce\xce\xce\x2e\xb9\x15\xf5\x7f\xa2\x95\xb8\xaf\x19\x53\x9b\xad\x75\x01\x39\xcb\xb8\x0f\x4e\x99\xd6\x73\xc6\x32\xbe\xdc\x07\xe9\x39\xcb\x78\xb3\x09\x9c\x01\x00\xd7\xb6\xe5\xac\x60\xd3\x27\x1f\xae\x6d\xeb\xf1\xa1\x33\xb5\xc7\xd3\x33\xfa\xd8\x74\x0a\x6d\x5b\x34\x11\x21\x9c\xc4\x9d\x70\x4a\x2c\xb5\x8c\x5b\x25\xbc\xc5\xde\x76\xa8\x85\xc1\x89\x32\x6b\x59\x87\x13\xda\x70\xb0\x3b\x69\x50\x77\x3e\xd8\x0d\x31\xf8\x0a\xf2\x1e\x5e\x06\xdc\x57\xff\x5c\x5d\xdb\xf6\xbd\x73\x98\x45\x92\x5c\x3a\x07\xe9\x9c\x75\x05\x1e\x0e\x68\xac\x83\xb1\x81\x82\x5a\x65\x5a\xc6\xee\x84\xc3\x5b\x21\xb1\x40\xd5\xd0\x1a\xdf\xcc\x60\x94\x4e\x7b\xf4\x69\xdb\x56\xbf\x3b\x65\x82\x36\x14\x54\xc4\x83\x03\x3b\x8c\x68\x07\x4e\x1f\x1c\xaa\xaa\x52\x26\x48\xd7\x88\x5a\x3e\x1c\x46\xe4\x5a\x1a\x02\x14\xf8\x01\xa7\xaf\xd0\xf3\xab\x4f\xd7\xe7\xe0\x25\x08\xf7\x35\xcf\x23\xbb\xdf\x9b\x15\x6c\xd3\xbb\xfe\xdc\xec\xe7\xed\xb9\xb2\xc6\x07\x61\xc2\x4b\xdd\x61\x2c\xec\xb7\x12\xbb\x7f\xa5\x93\x57\x5a\x74\x5e\x52\xe6\xae\x0e\x78\x60\x59\x6d\xcd\x4a\x05\x65\x0d\xfa\xc1\x60\x99\x70\xad\xef\x45\x2f\x6e\x46\x35\x92\x44\x2a\x7f\xe0\xe9\xbc\xf4\x7f\xda\xf9\xad\xce\xe3\x86\xc7\xe2\x66\x94\xa1\xec\x61\x73\xb9\x4d\xbc\x05\xf2\xfe\x4f\xf9\x98\x96\xac\xcb\xc8\xe2\x9e\xe5\x47\xe7\xb0\xb8\x19\xa4\x50\x8b\x3f\x97\xd8\xe1\x7c\x06\x27\x4c\x9b\x8a\xf0\x14\x93\x7d\x0d\x98\x41\x6c\xb7\xd2\xac\xf2\xe3\x56\x89\x5d\x75\xac\xac\x60\xd9\x81\x25\xf8\x3c\x38\x22\x4b\x97\xa0\xfa\xd5\x2a\xf3\x28\x2a\x89\x2e\x58\x2f\x2a\x7a\xf1\xd8\x86\xb7\x45\xc5\x80\xa3\x1e\x5a\x91\x14\xfa\xad\xaa\xaa\x17\xe2\x64\xe8\x9c\xc1\x51\x4f\x19\xb3\x90\xbd\xbd\xbf\xfe\x56\x7f\x14\x66\xff\xb3\xd5\x5a\x38\x9f\xd7\x56\xcf\xd5\xff\xb2\x84\x93\x5b\x29\x02\x94\x09\x25\x94\xff\xb8\xf7\xb7\x1a\x4b\x6b\x75\x91\xaa\xa1\xfc\xd3\xe9\x70\x32\x43\x70\x9d\x64\x99\x6a\x8e\x60\xd2\xe7\xc7\xd5\xff\x11\x19\x73\xfe\xae\xe4\x25\x52\x9e\x22\x82\x66\xe0\x39\xc7\x04\x7e\x71\x7a\x1e\x27\xba\xf8\xfe\xec\x06\x13\xf0\xa2\xe4\x2c\xcb\x94\xf1\x7f\x09\xed\x3f\xbf\x40\xe6\x07\xa1\x64\xe1\x50\xeb\x80\x5f\x9c\xe2\x3c\xde\x90\x61\x83\x68\xc9\x14\x96\x2d\xbb\xa6\x21\xba\xf8\x24\x55\xbf\xc9\xdd\x4f\x5d\xd3\x48\x37\x8f\xec\x39\xe7\x05\xcb\x6a\x13\x08\x71\xd6\xb7\x40\xd1\xff\xd3\x0b\x28\x5c\xa6\x8c\x17\x50\x93\x49\xac\x92\xc8\xaa\xbf\x9d\x0a\x72\x88\xcf\x89\x20\xc6\xad\x53\xdc\x1a\x97\x43\xcd\x17\x58\xa7\xc0\xe7\x91\xcd\x26\x54\xf3\x2d\xdd\xdc\x26\xe7\xdf\x7e\xb7\x22\xa7\x4c\x28\x88\x8d\xbc\x5d\x4f\xce\xe8\x2d\x49\x44\x3d\xc7\x0b\xe9\xcb\x98\x9e\xba\x9f\x51\x19\x93\x09\xeb\x17\xcf\x91\x45\x44\x52\xd7\x7a\xe6\xd4\xf5\x97\xc5\x25\xde\xc3\x78\xae\x22\x28\x9d\x17\xc7\x4b\xbb\x5a\x7e\xea\xa4\xa7\xdb\xf0\xc1\xba\xf9\xad\xfe\xc5\xe4\x9e\x04\x2b\x13\xc6\xf3\xa3\x1a\xc4\xed\x4b\x9c\xc5\x94\x89\x93\xf3\xbe\x49\xc3\xf1\x6c\xf6\xe4\xfc\x5d\x02\xbc\x3e\x5e\xbe\x9f\x2d\x1a\x2d\x7f\x1c\x83\x7e\xac\xa6\x53\x27\x37\xf6\x4e\x42\x0b\x1f\x70\x52\x9e\x1c\x6b\xf1\x4f\xdf\xc5\xf1\xdb\xf8\xea\x93\xc7\xbe\x04\x00\x00\xff\xff\xcd\x95\x4f\x16\xfa\x06\x00\x00")

func commonGoBytes() ([]byte, error) {
	return bindataRead(
		_commonGo,
		"common.go",
	)
}

func commonGo() (*asset, error) {
	bytes, err := commonGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common.go", size: 1786, mode: os.FileMode(438), modTime: time.Unix(1536673083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x46\xf2\x7f\x4d\x03\xfe\x0e\x53\x22\x2d\x48\x9b\x21\x9d\x3f\xd0\xff\x8b\xa4\xba\xc2\xb5\x95\xd4\x07\xc7\x4a\x2d\xa7\xb9\x83\x61\xb8\x34\xb9\xb2\x79\xa1\x48\x6b\x97\xb4\x62\x10\xfc\xee\x87\xd9\x27\xee\x52\x94\x6c\x37\x6d\x2f\x05\x62\xa0\x8d\xb4\x0f\xb3\xf3\xf0\x9b\xd9\x99\x59\xdd\xc6\xc9\xc7\xf8\x9a\xc0\xa7\x64\x7b\x6b\x7b\x2b\x9b\xdf\x96\xb4\x02\x6f\x7b\x0b\x00\xc0\x25\x94\x96\x94\xb9\xdb\x5b\x8e\xcb\x2a\x9a\x94\xc5\x9d\xfa\x9c\x15\xd7\x38\x8e\xdf\xae\xb3\xea\xa6\xbe\x0a\x93\x72\x1e\x5d\x97\xc9\x22\x17\xff\x77\xb7\xb7\x7c\x9c\x8f\x1e\xfd\x07\xbf\xd4\x84\xde\x03\x23\x39\xa9\x4a\x0a\xf5\x6d\x1a\x57\x84\x42\x5c\xa4\x90\xe2\x18\xa1\xb0\x76\x2f\x9e\x34\xab\x8b\x04\xbc\x18\x76\x9a\x26\x3c\x8b\xaf\x72\x72\x12\xcf\xc9\x9b\xb2\x6d\x7d\x18\x7f\xca\x58\xc5\x3c\x1f\xae\xca\x32\x87\x66\x7b\xcb\xa1\xa4\xaa\x69\x01\x71\x78\x49\xf8\xdc\xf6\x56\xfb\x00\x8d\x43\xce\x43\x3a\x4c\x44\x30\x98\x4a\x2a\xdb\x5b\x4d\xf3\x1c\x9e\x49\xae\xcf\xee\x6f\x09\xbc\x1c\xc1\x2d\xcd\x8a\x6a\x06\xee\xb7\xec\x5b\x76\x29\xa8\x51\x17\xc2\x77\x94\xcc\xb2\x4f\x3f\x67\x69\x4a\x0a\xb0\x0f\x95\x74\xa4\x26\x06\xe9\xbc\x17\x73\x8f\xa2\x83\x9a\x4d\xaa\x72\x98\xd0\x54\x4e\x3e\x44\x69\x7b\xab\xc2\xed\x4d\x63\xd3\x6b\x5b\x60\x15\xad\x93\x0a\x15\x83\xd8\x59\xde\x10\x4a\x18\xf0\xbf\xf3\x0b\xfe\xed\x20\x8f\x6b\x46\xc4\xb4\xd8\x7b\x50\xe6\x7c\x5a\x00\x4a\xcc\x94\x34\x25\xf4\xa7\x7b\xb9\x51\xcc\x40\x14\xb9\x62\x02\xae\xee\x21\x43\x40\xb0\x04\xa2\x68\x56\x52\xc8\x0a\xb4\x1e\xae\xce\xb3\x79\x56\x89\x13\x71\x54\x0c\xc6\x79\x5e\x2e\x5f\x67\x39\xc2\x07\x0d\x27\x4d\xa4\x85\x30\x95\xbb\x5e\x88\x01\x09\xc4\x46\x06\x30\x8f\x6f\xcf\x05\x9b\x17\x59\x51\x11\x3a\x8b\x13\xd2\xb4\xfd\x73\x4c\x30\x3c\x55\x59\x62\x6f\x5f\x59\xf2\x84\x41\x57\xfa\x4f\xcd\x2a\x50\x26\x55\xb0\xae\x11\xd6\x2b\x66\xf3\xe1\x18\xf5\xe6\x09\xed\x65\x45\xe5\x0f\x2e\x93\x9c\xd6\xa1\x58\x37\x12\xda\x16\x83\xd2\x0f\x6a\xcb\x89\x06\x4f\xf3\x61\xbf\xb3\x47\x56\x5c\x7b\x3e\x6c\x3e\xcd\x34\xdf\x08\x2a\x5a\x93\xc1\x23\xe5\xa1\x27\x64\xd9\x77\x5c\x0d\x6c\x6f\xb3\x5c\xe8\x10\x43\xd3\xad\x75\xde\x77\x96\x8c\x43\xc7\x49\x87\x54\xa7\x19\xf0\x1a\x38\xac\x37\xdb\x2a\xa9\x15\xb6\x46\x30\x8f\x3f\x12\x6f\x18\x61\xfe\x13\x39\x93\x21\x47\x71\x66\x00\x72\x80\xb3\xde\xec\x1a\x2d\x44\x11\x89\x93\x1b\xe9\xcc\x90\x94\x79\x3d\x2f\x18\x46\x1b\xa0\x71\x71\x4d\x20\x3c\x10\x43\x80\x91\x63\x23\x2c\x84\x95\x2e\x9b\x46\xed\xe1\x6c\x4f\xa0\x6d\x1f\xb0\x5b\xd8\x45\x92\x11\xc4\xb7\xb7\xa4\x48\x3d\x63\x30\x00\xb7\x69\x0c\x92\x6d\xeb\x82\x3f\x00\x21\x29\x89\x10\x41\x84\x1a\x06\x51\xc4\xfd\x48\x44\x98\x8d\xec\xc3\x44\x44\xad\x21\x01\x2e\x0f\x09\x4b\x1e\x92\x42\x45\x3d\x43\x06\x39\x14\x80\x0b\x3d\x11\xe0\x70\x3c\x3d\x70\x87\xc4\x78\x80\xcd\x4d\x5c\xee\xff\xd1\x4c\xee\xaf\xe5\xb1\x69\x80\x14\x29\xb4\x0f\xc4\x2f\x09\xd8\xbe\x71\x04\x34\x1f\x85\x32\x0b\xc5\xea\x0a\xdf\x04\xb2\x61\xa7\x08\xbb\x00\x6c\x88\xae\x07\x07\x30\x36\x24\xb7\x21\xf5\xa0\xcc\xe3\x22\x85\x72\xd6\x13\x7d\x93\x7e\x64\xa8\x79\x9a\x7e\x9c\xa6\xc9\x66\xe0\x91\x05\x84\x28\xe5\x9b\x12\xdc\xac\xa8\x5c\x9f\xcf\x39\x96\xf6\xac\xe8\xe4\xc3\x90\xda\x0a\xb2\xfc\x35\xce\xc5\xad\xb1\x26\xe0\x39\x8e\x15\xd3\xce\xfb\xba\x82\x11\xfc\x08\xee\x05\x8c\x40\x10\x53\x3b\x0c\xe5\x39\x8e\x60\x9c\xe4\x8c\x40\x9f\x7b\x11\x18\x3f\x53\x00\x41\x64\x5d\xcc\xfe\xb3\x45\x38\xbf\xb8\xba\xaf\xc8\x67\x8a\x20\x88\xfc\xb9\x22\x38\x0e\x17\x42\xe3\xf8\x31\x90\xb6\xa1\xda\x34\xcf\x2a\xbc\x95\xf0\x9e\x09\x15\x0d\x01\x53\x6f\xce\x2e\xab\xf2\x92\xe5\x59\x42\xec\x7c\xc9\x4a\xd2\xac\xe8\xe4\x2b\x4c\xc3\xb3\xf2\x96\xd0\xb8\xca\xca\x42\xa5\xb7\xa1\x9e\x13\xf4\xc5\xc1\xb6\x33\xf0\x9d\x49\x99\x1b\xeb\x71\x68\x99\x55\x37\x10\xbe\x21\xd5\xdb\x32\xcd\x66\x19\xde\x05\x62\xae\xa3\xa6\x56\x3b\x4e\x14\x35\x4d\xa8\xbe\x34\x0d\xb7\x6e\x49\xb9\x85\x91\xb4\xe5\x66\xe0\xaf\x8e\x4b\x00\x83\x0f\xbe\xa6\x29\x41\x90\x0a\x6b\xda\xa2\x29\x1c\xbc\xae\x8b\x04\x8d\x87\xe9\xa4\x77\x17\xe7\xd0\x34\x06\x5d\x5c\xb5\xd3\x34\xf6\x5e\x85\x05\x47\x18\x77\x89\x62\x1b\xd9\x66\xd3\x1a\x93\x77\x31\xe6\xd6\xec\x03\x4e\xc3\xb9\x9d\xda\xea\x45\x7a\x81\x8e\x8b\x6a\x24\xb8\x8b\x73\xdf\x3c\x2b\x8c\xe9\x35\x66\x34\x6a\x81\x35\x97\x94\x45\x9a\x21\x97\x30\xe2\xc1\x74\xbf\x48\x27\x14\xb9\x15\xe6\x31\xa0\x0a\x7c\x34\x3c\x50\x1b\xda\x16\x81\x6b\x10\x4b\x43\x99\x4d\x6b\x96\xd4\x48\x00\x4b\x5e\x92\xf2\xa5\xaa\x78\x4b\xe5\x77\x6d\x3f\x52\xa4\xda\xd6\xfa\x33\xff\xa8\xf1\x34\x00\xff\x27\x14\xba\xa8\x01\xc0\xca\x25\xce\xf3\x81\x8a\xf6\xef\xe2\x11\x47\xc5\x26\xa7\x68\x9a\x68\x07\x42\xd8\x89\xbe\x04\xc7\x08\xc3\xf0\x7f\xe0\x1b\x68\xe2\xcb\x00\xee\x90\x90\x50\xcf\x5d\x9c\xcb\x94\x02\xff\xf8\xc2\x0d\x0e\x04\x77\x32\x8b\x30\xf1\xf9\x87\xfb\xd2\xd1\x09\x78\x2e\xec\x42\x7a\xf5\x4b\x4d\x18\x6e\x7b\x5d\xd2\xe9\x22\x3f\x2a\xbc\x9c\x14\xa8\x3e\xdf\x87\x5d\x70\xfd\xbf\x93\x93\xa9\x5c\x0a\x31\x3a\xbc\xe2\x01\x52\xc0\xaa\x98\x56\x48\x82\x4b\x05\x49\x5e\xc7\x8c\xb0\xa7\xb0\x30\x55\x14\x64\x75\x34\xc4\xc3\xda\x64\x9d\x63\xf9\xb2\x2a\xa7\x8b\xdc\xf3\xc1\x13\x9e\x10\x58\x48\xf3\x11\xae\xdb\x5b\x0e\x5b\xe4\x1f\x94\xe6\xf1\xdf\x7d\x84\x46\x87\xdd\x9a\x11\x76\xc6\xe9\xd4\xda\x42\x2e\xe6\xa7\x8e\xae\x91\xf8\x72\x77\x07\xed\x9b\xcd\x00\xad\x6e\x14\x50\x3e\xfc\x03\xf6\x84\x67\x18\x1b\x46\x32\x63\x62\xe1\x3f\xcb\xac\xe8\x15\x5c\x01\x70\xfa\xad\x60\x8e\x55\x94\xd3\x9f\x8e\x8f\xc7\x07\x67\x80\x58\x33\x08\xed\x82\x0b\xaf\x4f\x27\x6f\x39\x3a\x45\x38\xe2\x55\xeb\x34\xb9\x21\x73\x32\xa9\x2b\x68\x5b\xd1\x67\x94\xac\xa9\x73\xcf\x68\x36\xf7\x0c\xd9\x5d\x70\x7d\xc9\x2b\x44\xd1\xff\x71\xef\x63\xf1\xac\xba\xe7\x9c\x0b\x36\x76\x47\xe0\xc2\x87\x9f\xc7\xa7\x63\xc1\x86\xda\x2d\x98\x35\xc5\x97\x65\x8d\x21\xbc\x2c\x09\x5f\xae\x48\xde\x55\x40\x52\x6e\xeb\xb4\xc9\xe9\xe1\xf8\x14\x7e\xfa\x37\x3f\x50\xd0\x30\x4f\x53\xed\x94\x6f\x46\x5a\xc9\xc6\xe6\xe3\xa3\xb7\x47\x52\x63\xa2\xfb\x1a\x1e\x55\x65\xec\xc9\x4d\x4a\xc7\x9c\x8c\xd9\x27\x59\xa1\x03\xfb\xc7\xc7\x93\x0f\xf0\xfa\xe8\xf8\x6c\x7c\x7a\x74\xf2\xc6\x95\x3b\xbb\x16\xa6\x58\x6d\x20\x68\xb5\x9a\x5c\x29\x26\xdf\x90\xea\xb4\x5c\x82\xc7\x08\x63\x18\x6d\x76\x78\xdf\x37\x9c\x8a\xaf\x3e\x78\x3b\x3d\x9b\x8a\x4e\x04\xb4\x6d\xc0\xfb\xca\x1c\xc0\x0e\x86\x52\x42\xf9\x7f\x25\xaf\x77\x9c\xae\xc5\xf4\x42\x23\xa8\x87\xed\x3a\x54\xbe\xa1\x14\x79\x5c\x5e\xf3\x33\x0e\x16\xf9\x29\x59\x84\xfd\xe6\x87\xd0\xc9\xbf\x0e\x8e\xcb\x6b\x4f\x52\xec\x08\xfa\xda\x22\x0b\xde\x81\x46\x1b\x0b\x21\x42\xde\x92\xf6\x56\x78\x08\xc3\xd0\x97\xbc\xd3\x72\x09\x6b\x05\xdd\xde\x72\xa2\xe8\xea\x1e\xa6\x8b\xfc\x13\xff\xcc\x45\x1d\x01\xd7\xd4\x27\xbc\x4e\x3d\xdc\x1f\xf0\x73\x91\x22\x2d\x97\x0c\xb5\x23\xda\x30\xbd\x06\xce\x51\x45\xa8\xc7\x97\x86\xfc\xa3\x1f\xbc\xf0\x85\xf4\xb8\xe3\x9b\x11\x14\x99\xe8\x4b\x3f\x52\x21\x60\xfc\x71\xd5\x8c\x29\xf5\x08\xa5\x7e\x37\xc5\xe3\xb2\xc4\x48\x91\xe5\x01\x9e\xd4\xc1\x0e\x7d\x05\x39\xf6\x61\xa4\xf0\x6b\x94\x0c\xb8\x5e\x3c\x20\x84\x27\x64\xe9\xb9\x64\x7e\x5b\xdd\xa3\xbe\x98\x2a\x8f\x5b\x5e\x0d\x19\x9c\xa0\x32\x46\x7c\xc9\xf9\xde\x85\x5c\xc3\x0d\x43\xcb\xa5\xea\xd4\xeb\x36\x20\x57\xe8\xa4\xc0\x1b\xdf\xd6\xd3\x71\x19\xa7\x93\x82\x20\x6b\x02\x1f\x92\x21\x5a\x2e\x03\xe4\xea\xd1\xd8\x66\x1b\xc0\x7d\x7e\xf1\x3b\xe1\xfd\x05\x03\xfa\xe9\x00\x7c\xfe\x97\x22\x90\x33\xd7\x41\x90\x33\xcc\x9f\x00\x5e\x8e\xf6\x5e\x65\x3f\x74\x78\x7c\x95\xed\xee\x0a\x3e\x38\x96\xb2\x8b\x15\xf0\x48\xfd\x44\x11\xac\x43\xd0\xdb\xb8\xb8\x17\xd4\x7a\x18\x62\xeb\x40\xd4\xab\xd5\x45\xcd\xbb\x1e\x41\xd0\xc1\x44\xe5\x94\x16\x52\xd4\xa0\x20\xcb\x0d\xdb\x4b\x35\xd5\x0a\xb6\xc8\xdf\xcb\x45\xb4\xf7\x9a\x32\xe3\x2f\x69\x81\xac\xea\xbb\x54\xb4\xeb\x31\x1b\x66\xb0\xe8\xe8\xcc\xce\x1c\x0d\xa0\xbe\x35\x8c\x63\xb0\xd6\x35\xc6\xf4\x98\x3a\xd5\xd7\x9e\x6c\x1d\xb2\x72\x97\xda\x07\xb9\x81\xeb\x2b\x35\xfc\xde\x1c\xa7\x53\x51\x9c\xe7\xeb\x34\xa8\xa6\xb4\x04\x72\x20\x30\xc4\x13\xfe\xb1\x79\xf5\x8a\x33\x49\xce\x65\x02\xf4\xdb\xfb\x77\x87\xfb\x67\x63\xed\x55\x3a\xc3\x69\x5b\x98\x8e\xcf\xe0\x37\x91\x91\x08\x0d\xa8\xed\x4f\x48\x7a\x2c\x33\x6e\xce\x76\x0c\x6b\x3c\xcd\x4f\xad\x78\x23\x05\xb7\xad\x2b\xee\xb7\xe1\x68\x23\x37\xa0\x7a\xc2\xf1\x27\x92\x78\xbe\xe6\xc1\x0e\x1f\x0f\x84\x04\xe9\x8a\x22\x10\xe8\x3b\xc2\xbe\x79\x2c\xf7\xe4\xd5\xe2\x70\x33\xf8\xf3\xdd\x53\x00\x6e\xd5\xf3\x38\xea\x06\x20\xd7\xcd\xa6\x24\xe7\x39\xb0\xb9\x4b\x1a\x3c\xed\xba\xcb\x3a\x07\x55\xe2\xab\x6d\x3d\xef\x31\xb6\x04\xc2\x77\x2c\xd5\xc8\x6a\x74\xd9\x85\x00\x5d\xc3\x19\xb4\x3b\x61\x34\xbe\xf5\x50\x60\xd6\x96\x86\x39\x62\xdb\x1d\x84\x2f\xf0\x0a\xb5\xf3\x9a\xd6\x7c\xe7\x9c\x0a\x87\xb0\xb8\x37\x4e\x71\xdd\x01\xef\x71\x0f\xc7\xc7\xe3\xb3\x31\x02\x59\x2b\xc0\xa8\x1d\x56\x5d\xaa\x03\xbe\x3e\x54\x51\x8d\x22\xa0\x75\x01\xfc\x22\xfb\x7c\x2f\x78\x9a\x0b\xfc\x59\xf8\xc7\x7f\x2c\x1f\x30\x9c\x20\xda\x91\x8e\xf0\x36\x66\xec\xa8\x60\x84\x56\x97\x7d\xf9\xf8\x4d\x07\x3c\xa9\xb1\x27\x02\x58\xe7\x21\xdc\x13\x14\xbb\x83\xd9\x60\x8f\x61\x33\x19\xe4\xc7\x89\xc6\x16\xbb\x29\xeb\x3c\x85\xa2\xac\xe0\x8a\x80\xc8\x12\x9f\x43\xc6\xf9\x24\x7c\xfc\x86\x37\xf8\x2d\x59\x7b\xee\x88\x43\x79\x81\x40\xd1\x5c\x48\xbe\x0a\xf6\x6b\x2c\x2a\x5c\xb6\xc8\xf1\x4e\x3f\x2c\xf3\x3c\xa6\xcc\x83\xa6\xc9\x49\x61\x3e\x8e\x40\xa0\x37\x07\x98\x25\xf8\xa6\x5a\x0d\x28\x1e\x9d\x4c\xc7\xa7\x67\x70\x74\x72\x36\x19\x84\x9e\xe7\xc2\xae\x16\xde\xed\xf5\xec\xd9\xbb\x98\xc6\x73\x7e\x9c\xb9\x0c\x5c\x1f\x7e\xdd\x3f\x7e\x3f\x9e\x72\xcc\x4a\xb6\xd7\x23\xf6\x4e\x0a\xc5\xdf\x87\xad\x08\x13\xc0\x5e\x00\x79\xb1\xf3\xbd\x0f\x51\xf4\x3d\xcc\x32\x92\xa7\xac\x17\x05\x30\xcf\xd6\x71\x80\x9b\x42\x5a\xcb\x69\x9a\xe7\xbd\x57\xa3\xb6\x55\x5d\x28\x7e\xa6\x76\x74\xfc\xc6\x29\x85\xd6\x53\xc2\x9b\x49\xab\x5e\xa6\x39\x31\xd9\xdd\xb1\x62\xd1\xef\x71\x37\xd7\x40\x2f\x1a\x19\x46\x58\x70\xe7\x45\xa0\x2c\x13\x20\x43\x8f\xf7\x44\x5c\xfd\x47\x79\xe2\x83\x17\xd1\x4e\xd7\x6f\x92\xef\x9f\xcf\xcc\x92\xe1\xe5\x08\x56\x0a\x47\x71\x73\xd1\xa1\x5f\x22\x4d\xe3\xbb\xf5\xf7\x96\xf6\x4a\x5e\x7a\x24\x18\x27\xbb\x7b\x89\x8f\x2d\xfa\x03\xdc\xae\x2b\xb7\x94\xd3\x34\x43\xcf\x87\xdc\xa8\xd9\x0c\xa0\xff\x82\xa8\x5a\xb4\xd9\x0c\xe8\x2a\x24\x8c\x0e\x87\xe3\x24\xa5\x09\x24\xfc\x36\xfc\x84\x8a\x6b\x17\xdd\xc2\x45\x00\xee\x8f\x6a\x7c\x10\x8c\x83\x50\x54\x7d\x47\x8e\x46\xf9\xfc\x36\xf0\x80\xb8\x99\x7d\xe4\xdf\x75\xbf\x0c\x01\x54\x2f\xfc\xaf\xe6\xa2\x6b\xd5\xea\x4f\x5d\x1f\x00\x8f\x1f\xee\x03\x98\x61\x3f\x89\x0b\x1e\xe8\x45\x74\x07\xdd\x12\x08\xad\x7c\x05\x25\x9b\xd4\xd5\x4a\x92\x20\x45\xe4\xc9\x8d\xb3\x18\x5a\xb1\xd0\xd3\xc9\x82\x57\x3b\xae\x3c\x29\x2b\xaa\x72\x6d\xb0\x06\x79\x1e\x6f\x73\xdf\xc5\x79\x4d\x98\x18\x5f\xe8\x51\x77\x6d\x5d\x6e\xbb\xb2\x7e\x45\x10\x51\x2b\x59\xe4\x2a\x2e\x71\x1b\xca\xca\xda\x0e\x49\xb8\x48\xc5\x23\xe8\x02\xd2\x63\xcb\xea\x4d\x0c\x74\x21\x4b\x60\x08\xff\xa3\xab\xc5\xb0\x19\xc7\x8c\xbc\x79\x6d\xf4\xf9\x29\xae\x92\x1b\xef\x0a\xff\xff\x35\x00\x7d\x0d\x40\x5f\x03\xd0\x17\x1b\x80\x5c\x2f\x2b\x80\x3b\xaa\xef\x06\x5f\x62\x34\xe2\xbc\x0d\x1c\x6d\x75\xdd\xba\xc0\xb4\x31\x34\x3d\x50\xd2\xdb\x91\xc9\xa8\x1e\x9c\x94\x70\x5b\x6d\xfc\xd5\x24\x62\x4a\x40\xa4\x7b\x3f\xcf\x82\xee\xad\xfc\x5d\x4c\x2b\x5e\x1a\x9b\xd1\x4a\xa6\xc1\xf2\x07\x3f\xcf\x32\xd8\xf3\xbb\x7c\x3a\x25\xb9\x7a\x97\xb6\xc1\x7e\x39\x5e\x78\x74\x78\xaa\x4b\xad\x95\x23\x76\xb4\xf6\x8b\xf4\xf2\x33\xe8\x75\x89\x7a\xf7\x10\x8b\xd5\x4f\x4f\xe8\xf0\x20\xaf\x59\x45\xe8\x8a\x98\x1d\x0b\x6b\x8e\x1f\x3e\xba\x3b\xcc\x4c\xda\x91\x98\x6d\x4e\xb1\xdc\x86\xa1\xc8\xd0\x1d\xa7\x97\x87\xaf\x5c\x73\xb3\x38\x67\xc6\x3d\xd7\xeb\x0f\xf5\xfa\xbf\xa0\x3a\xdd\x59\x45\xa8\x02\x11\x0e\x04\x60\xfc\x46\x5a\x3e\x00\xf4\x5b\xff\xd0\xeb\xfd\x77\x65\xf5\x6a\x8a\xcf\x23\x17\xa7\xf8\x03\xbc\x10\x7e\xa2\x5f\xbe\xc8\xff\xeb\x1e\x35\xef\x70\x23\xc4\xf6\x5e\x41\x06\x3f\x88\x2d\xaf\x40\xb7\xb8\xe7\xba\x0e\x1c\xfe\x9d\x70\x00\x2f\xf6\x7c\xd9\x0b\xc7\xa5\xdf\xad\xf2\x22\x7e\xb7\x90\xcd\x00\x45\x0e\xdf\xc6\xb7\xd3\x24\x2e\xbc\xb9\x7a\x62\x76\xd6\x5d\xc5\x7c\xcf\x5d\x9c\x07\x50\x7e\xe4\x5c\xac\xfc\xae\xcc\xbd\x78\x85\x73\xea\x97\x15\x83\xe5\x22\x88\xa7\x06\xf9\xd3\x0c\xbc\x03\x42\x4f\x0f\x4c\x68\x76\x9d\x15\x71\xde\xb6\xbe\xfa\x39\x51\x14\xad\x23\x63\x6f\x55\x77\x97\xa3\x7f\xa5\xd2\x21\x4d\xf0\x62\xdc\x3c\xa2\xb1\x2f\x9e\x8c\x1c\xa7\x05\xf5\x34\xe5\x38\xce\x15\x25\xf1\x47\x33\x66\xc9\xb8\xc9\x95\x75\x90\x97\x8c\x78\x03\x6f\x04\x2a\x66\xfd\x37\x00\x00\xff\xff\x1c\xd4\x56\x43\x61\x33\x00\x00")

func modelGoTplBytes() ([]byte, error) {
	return bindataRead(
		_modelGoTpl,
		"model.go.tpl",
	)
}

func modelGoTpl() (*asset, error) {
	bytes, err := modelGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.go.tpl", size: 13153, mode: os.FileMode(438), modTime: time.Unix(1536684217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _models_typesGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6b\xc3\x20\x14\xc7\xcf\x11\xfc\x1f\x1e\x39\x8c\xad\x74\xf5\x5e\xe8\xa9\x83\x1e\x36\x36\x18\xbb\x17\x6b\xde\x5c\x98\xc9\x4b\xd5\x94\x16\xf1\x7f\x1f\x9a\xf4\xc7\xd6\xc2\x2e\xa2\x1f\xf3\xde\xfb\xf8\x4d\x27\xd5\xb7\xd4\x08\x7b\xc5\x19\x67\x75\xd3\x91\xf5\x70\xcf\x19\x00\x40\x89\xd6\x92\x75\x25\x67\x45\xe9\xbc\x55\xd4\xee\x8e\xfb\xba\xd5\x89\xa7\x93\xae\xfd\x57\xbf\x99\x29\x6a\x84\x26\xb5\x35\xc3\x5a\x72\xf6\x90\xee\x43\xb0\xb2\xd5\x08\xb3\x0f\xb9\x31\xe8\x20\x46\xce\x0a\x7f\xe8\x10\x42\x18\xe1\xab\x6c\x70\x45\x10\x23\x38\x6f\x7b\xe5\x03\x67\x45\x71\xaa\x5b\x92\xe9\x9b\x76\x2c\x4c\xfc\xf1\xc8\x72\xdd\x5b\xaa\xcb\xad\x0e\xdd\xd8\x45\x88\x0c\xce\x1f\x25\x98\xd1\x73\xdd\x56\x63\xa3\x10\xb0\xad\xd2\x36\x1d\xd6\xb8\xaf\x9d\x77\x53\x58\x57\x68\xd0\x63\x05\x1b\x22\xc3\x59\x11\x39\x13\x13\xce\xe6\x0b\xb8\xdb\xab\xd9\x0d\xe3\xe4\x9a\x94\x6e\xc9\xfe\x96\xc8\xa6\x73\x08\x21\x9b\x3e\xe1\xa7\xec\x8d\x5f\x51\x8c\xd3\xb1\x05\x8e\x6e\x13\x31\xe4\x76\xf2\x13\x02\x0c\x69\x07\x3e\x27\xc8\x59\x4e\xef\x85\x74\x56\x59\x6e\xcd\x39\xb6\xf4\xd3\x6e\x05\x3e\xf0\x2b\xf9\xe1\x91\xc3\x65\x9e\x3f\xcc\xcb\xcb\x4e\xda\xcb\x19\xef\xb8\x85\xc5\x25\xf8\xf3\xf0\x7f\x87\xcd\xc1\xdb\x1e\x61\x7a\x35\x2f\x72\xf6\x13\x00\x00\xff\xff\xb4\x33\xc9\x27\x84\x02\x00\x00")

func models_typesGoTplBytes() ([]byte, error) {
	return bindataRead(
		_models_typesGoTpl,
		"models_types.go.tpl",
	)
}

func models_typesGoTpl() (*asset, error) {
	bytes, err := models_typesGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_types.go.tpl", size: 644, mode: os.FileMode(438), modTime: time.Unix(1536683816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _not_usedGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x6b\xdb\x30\x14\x7d\xae\xc1\xff\xe1\xcc\x4f\x76\xe6\xc8\x7d\xe9\xcb\xc0\x0f\xa3\x0b\xa5\xd0\xa6\x5b\xd3\x95\x41\x29\x45\x75\xae\x13\x53\x59\x8a\x25\x7b\x59\x11\xfa\xef\x43\xfe\xc8\xb2\xb0\xe5\x21\x46\xf7\xe3\xdc\x73\xcf\x3d\x61\x90\xcd\xc2\x20\xcb\xa4\x6a\x51\x2a\x0d\xa9\xf6\x98\xcf\xf1\xda\xb5\x78\x23\xda\xa1\xdd\x56\x26\x0c\xca\x4e\x16\xb8\xe5\xc6\x5c\x4b\x43\xba\x7d\xb1\x96\x3d\xf0\x57\x41\x4b\x5e\xd3\x95\x72\x2e\xd6\x6a\x6f\xf0\xf4\x3c\x3b\x4d\xa4\x30\x64\x4c\xa5\x24\x66\x1b\x55\x34\x82\xad\x86\x67\x02\xd2\x5a\x69\xd8\x30\x00\x80\xaa\x84\x20\xd9\xa3\x24\xc8\x73\x9c\x4f\x09\xff\xd3\xd4\x76\x5a\x0e\x0d\x86\x2d\x69\x1f\x47\xfd\x38\x23\xaa\x82\x60\xb6\xaa\x13\x6b\x78\xfe\xaf\x04\xaa\x77\xed\x3b\xe6\xa8\x7a\x9e\xd4\xc7\xb7\x95\xdc\x44\xc9\x80\xe7\x86\xcf\x4f\xae\x3d\xde\x80\x39\x84\x84\xc4\xa7\xfc\x0f\x8b\x91\x97\x34\x8f\x5c\x18\x9f\xd9\x92\xd8\x91\x66\xab\x46\xdc\x72\xf9\xfe\x45\x09\xc1\xb5\x89\x61\xad\x20\x09\x76\xa9\x44\x57\x4b\x03\xe7\x90\x1e\x30\xd2\x56\x77\x34\x22\x0d\xff\xa6\x11\xa6\xd5\x1e\x2e\xba\x5e\xae\x16\xf7\x0f\xb8\x5e\x3e\xdc\x61\x52\x6d\x55\x6c\xa9\xa6\xbb\xae\x75\x0e\x71\x84\x8f\x07\x0d\x22\x58\x3b\x0d\xf1\xd2\x9a\xaf\x5c\xf3\xba\x1f\x77\x5c\x86\x28\xc1\xe3\xe7\x9b\xef\x8b\x95\x0f\x4f\xec\xc3\x60\x28\xc8\x32\xe8\x4e\xa2\xe9\x48\xbf\x4f\x32\x0c\xbb\xd5\xfc\x8d\xe2\xa7\xe7\x4a\xb6\xa4\x4b\x5e\x90\x75\x29\xce\x53\x08\x39\xbb\x48\x90\x65\x17\x28\x2b\x12\xeb\x03\x90\xf7\xc9\x4b\x0a\xad\xf6\xbe\x59\x73\xb9\x21\xf4\x17\x19\x8f\x76\x66\xed\x7c\x0c\x4f\xc2\xb8\x51\xf8\xb3\xb3\x7e\x66\x0e\xbe\xdb\x91\x5c\xc7\xfe\xd5\x23\x31\x6b\x8f\xf6\xbb\xba\x73\x2e\x39\x02\x23\xb9\x9e\x10\xdc\xc4\xa2\x2a\x71\xa3\x36\xbd\x6e\x97\x8d\xb8\xa7\x86\x9d\x9a\xef\xd8\x44\xe3\xf9\x7e\x5c\xde\xa8\x4d\x1c\x1d\x79\xd9\x9f\x1c\x39\x22\xbf\x6e\x3a\x1d\x28\xf5\xbc\xfe\xb6\x8c\xb7\x4b\x3e\xb9\x99\x7d\xf3\x22\xc6\x43\x75\xda\xeb\xc8\x18\x4b\xd8\xe2\x17\x15\x71\x72\xe0\xe7\x7b\x3e\xe4\x90\x95\xf8\x1f\x95\x85\xd6\x31\x69\x9d\xfc\xcb\xed\x27\xfb\x8e\x09\x59\x89\x30\x70\x61\x30\xcb\xc2\xe0\x77\x00\x00\x00\xff\xff\xae\xa5\x48\xae\xbd\x03\x00\x00")

func not_usedGoTplBytes() ([]byte, error) {
	return bindataRead(
		_not_usedGoTpl,
		"not_used.go.tpl",
	)
}

func not_usedGoTpl() (*asset, error) {
	bytes, err := not_usedGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_used.go.tpl", size: 957, mode: os.FileMode(438), modTime: time.Unix(1536578275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common.go": commonGo,
	"model.go.tpl": modelGoTpl,
	"models_types.go.tpl": models_typesGoTpl,
	"not_used.go.tpl": not_usedGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"common.go": &bintree{commonGo, map[string]*bintree{}},
	"model.go.tpl": &bintree{modelGoTpl, map[string]*bintree{}},
	"models_types.go.tpl": &bintree{models_typesGoTpl, map[string]*bintree{}},
	"not_used.go.tpl": &bintree{not_usedGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

