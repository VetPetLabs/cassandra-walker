// Code generated by go-bindata.
// sources:
// templates/common.tpl.go
// templates/model.tpl.go
// templates/models_types.tpl.go
// templates/not_used.go.tpl
// DO NOT EDIT!

package bind

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commonTplGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5d\x6f\xdb\x36\x14\x7d\x16\x7f\xc5\x99\xb0\x21\x12\xac\xc9\xc9\x6b\x1a\xaf\xd8\xb2\x16\xd8\x90\x0e\xed\x3c\x6c\x03\x8c\xa0\xa0\x65\x4a\xa3\x47\x93\x0e\x49\xc5\xf5\x0c\xff\xf7\xe1\x92\x94\xa3\x7c\x55\x2f\x22\x2f\xef\x39\xf7\xdc\x0f\x72\xcb\x9b\x7f\x79\x27\x18\x93\x9b\xad\xb1\x1e\x05\x03\x80\xdc\x79\x2b\x75\xe7\xf2\xb8\x5b\xee\xbd\x18\xd6\xed\xc6\xe7\xac\x64\x87\x43\xfd\x31\x42\x8f\xc7\x11\x38\x7b\x40\xb2\x6c\xc0\x65\x11\x14\xe0\xca\x74\x04\x9f\x3e\xf9\x70\x63\x3a\x87\xf7\xbd\x6e\x1c\x9e\x9e\xd1\xc7\xa6\x53\x28\xd3\xa1\x0d\x1e\xdc\x0a\xdc\x73\x2b\xf9\x52\x89\x60\xaa\xe0\x0c\xf6\xa6\x47\xc3\x35\xce\xa4\x5e\x8b\xc6\x9f\x91\xc1\xc2\xec\x84\x46\xd3\x3b\x6f\x36\xc4\xe0\x6a\x88\x2f\x70\xc2\xe3\x4b\xfd\xf7\xf5\x8d\xe9\xde\x59\x8b\x59\x20\x29\x84\xb5\x10\xd6\x1a\x5b\xe2\x70\x44\x6b\x2c\xb4\xf1\x04\xea\xa4\xee\x18\xbb\xe7\x16\x5f\x83\x84\x04\x65\x4b\x7b\x7c\x33\x83\x96\x2a\xd9\xe8\x53\xa6\xab\x3f\x5a\xa9\xbd\xd2\x04\x2a\xc3\xc1\x91\x1d\x47\xb4\x03\xa7\xf3\x16\x75\x5d\x4b\xed\x85\x6d\x79\x23\x0e\xc7\x11\xb9\x12\x9a\x1c\x4a\xfc\x80\xf3\x57\xe8\xf3\xeb\x4f\x37\x97\xc8\x2b\x90\xdf\x43\x9c\x47\xe5\x7e\xa7\x57\x30\x6d\xac\xfa\xf3\x62\x3f\x6f\xcf\xb5\xd1\xce\x73\xed\x5f\xea\x0e\x63\x7e\xbf\x15\xd8\xfd\x23\xac\xb8\x56\xbc\x77\x82\x22\xf7\x8d\xc7\x81\x65\x8d\xd1\x2b\xe9\xa5\xd1\x88\x83\xc1\x32\x6e\x3b\x17\x45\x2f\x6e\x47\x39\x92\x44\x4a\x7f\xe0\xe9\x9d\x70\x7f\x98\xf9\x9d\x2a\x82\xc1\x61\x71\x3b\x8a\x50\x45\xb7\xb9\xd8\x26\xde\x12\x45\x5c\x54\x8f\x69\xa9\x74\x19\x95\x38\xb2\xfc\x68\x2d\x16\xb7\x83\x14\x6a\xf1\xe7\x0a\x3b\x5c\xce\x60\xb9\xee\x52\x12\x8e\x30\xd9\x03\x60\x06\xbe\xdd\x0a\xbd\x2a\x4e\xa6\x0a\xbb\xfa\x94\x59\xc9\xb2\x23\x4b\xee\x73\x6f\x89\x2c\x5d\x82\xfa\x57\x23\xf5\x23\x54\x12\x5d\xb2\x28\x2a\xd4\xe2\x71\x19\xbe\x2e\x2a\x00\x4e\x7a\x68\x47\x52\xe8\x5f\xd7\x75\x14\x62\x85\xef\xad\xc6\x49\x4f\x15\xa2\x50\x79\x63\x7d\xdd\x9d\xfa\xc0\xf5\xfe\x67\xa3\x14\xb7\xae\x68\x8c\x9a\xcb\xff\x44\x05\x2b\xb6\x82\x7b\x48\xed\x2b\x48\xf7\x61\xef\xee\x14\x96\xc6\xa8\x32\x65\x43\xf1\xa7\xd3\xe1\x64\x06\x6f\x7b\xc1\x32\xd9\x9e\x9c\x49\x9f\x1b\x67\xff\x7b\x60\x2c\xf2\xb7\x55\x5e\x21\xc5\x29\x83\xd3\x0c\x79\x91\x63\x02\xb7\x38\xbf\x0c\x13\x5d\x7e\x7f\x71\x8b\x09\xf2\xb2\xca\x59\x96\x49\xed\xfe\xe4\xca\x7d\x7e\x81\xcc\x0d\x42\xa9\x84\x43\xae\x83\xff\xe2\x1c\x97\xe1\x86\x0c\x06\xa2\xa5\xa2\xb0\x6c\xd9\xb7\x2d\xd1\x85\x27\xa9\xfe\x4d\xec\x7e\xea\xdb\x56\xd8\x79\x60\x2f\xf2\xbc\x64\x59\xa3\x3d\x79\x5c\xc4\x16\x48\x5a\x9f\xbf\x81\xc4\x55\x8a\xf8\x06\x72\x32\x09\x59\x12\x59\xfd\x97\x95\x5e\x0c\xf8\x82\x08\x02\x6e\x9d\x70\x6b\x5c\x0d\x39\xbf\xc1\x3a\x01\x9f\x23\xdb\x8d\xaf\xe7\x5b\xba\xb9\x6d\x91\x7f\xfb\xdd\x8a\x2a\xa5\x7d\x49\x6c\x54\xdb\xf5\xe4\x82\xde\x92\x44\x14\x39\x5e\x08\x5f\x85\xf0\xd4\xfd\x8c\xd2\x98\x4c\x58\xdc\x3c\xf7\x2c\x83\x27\x75\x2d\x32\xa7\xae\xbf\x2c\x2e\xf1\x1e\xc7\x73\x15\x9c\xd2\x79\x79\xba\xb4\xab\xe5\xa7\x5e\x38\xba\x0d\xef\x8d\x9d\xdf\xa9\x5f\x74\xe1\x48\xb0\xd4\x7e\x3c\x3f\xb2\x45\x30\x5f\xe1\x22\x84\x4c\x9c\x79\x1e\x9b\x34\x1c\xcf\x66\x4f\xce\xdf\x26\x87\xd7\xc7\xcb\xc5\xd9\xa2\xd1\x72\xa7\x31\x88\x63\x35\x9d\x5a\xb1\x31\xf7\x02\x8a\x3b\x8f\xb3\xea\xec\x94\x8b\x7b\xfa\x2e\x8e\xdf\xc6\x57\x9f\x3c\xf6\x7f\x00\x00\x00\xff\xff\xc4\xc2\x8a\xda\x34\x07\x00\x00")

func commonTplGoBytes() ([]byte, error) {
	return bindataRead(
		_commonTplGo,
		"common.tpl.go",
	)
}

func commonTplGo() (*asset, error) {
	bytes, err := commonTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common.tpl.go", size: 1844, mode: os.FileMode(438), modTime: time.Unix(1537088901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelTplGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7d\x6f\xdb\x46\x93\xff\x9b\x06\xfc\x1d\xa6\x44\x5a\x90\x36\x43\x3a\x07\xf4\xfe\x48\xaa\x2b\x5c\x5b\x71\x7d\x70\xac\xd4\x72\x9a\x3b\x18\x86\x4b\x93\x2b\x9b\x4f\x28\xd2\xda\x25\xad\x18\x04\xbf\xfb\x83\xd9\x37\xee\x52\x94\x6c\x37\x6d\x9f\x14\xa8\x81\x36\xd2\xbe\xcc\xce\xcb\x6f\x66\x67\x66\x75\x17\x27\x9f\xe2\x1b\x02\x4d\x13\x1e\x91\x62\x52\x57\xe1\x7b\x31\xd2\xb6\xdb\x5b\xdb\x5b\xd9\xfc\xae\xa4\x15\x78\xdb\x5b\x00\x00\x2e\xa1\xb4\xa4\xcc\xdd\xde\x72\x5c\x56\xd1\xa4\x2c\xee\xd5\xe7\xac\xb8\xc1\x71\xfc\x76\x93\x55\xb7\xf5\x75\x98\x94\xf3\xe8\xa6\x4c\x16\xb9\xf8\xbf\xbb\xbd\xe5\xe3\x7c\xf4\xe4\x3f\xf8\xa5\x26\xf4\x01\x18\xc9\x49\x55\x52\xa8\xef\xd2\xb8\x22\x14\xe2\x22\x85\x14\xc7\x08\x85\xb5\x7b\xf1\xa4\x59\x5d\x24\xe0\xc5\xb0\xd3\x34\xe1\x79\x7c\x9d\x93\xd3\x78\x4e\x8e\xca\xb6\xf5\x61\xfc\x39\x63\x15\xf3\x7c\xb8\x2e\xcb\x1c\x9a\xed\x2d\x87\x92\xaa\xa6\x05\xc4\xe1\x15\xe1\x73\xdb\x5b\xed\x23\x34\x0e\x39\x0f\xe9\x30\x11\xc1\x60\x2a\xa9\x6c\x6f\x35\xcd\x4b\x78\x21\xb9\x3e\x7f\xb8\x23\xf0\x7a\x04\x77\x34\x2b\xaa\x19\xb8\xdf\xb2\x6f\xd9\x95\xa0\x46\x5d\x08\xdf\x53\x32\xcb\x3e\xff\x9c\xa5\x29\x29\xc0\x3e\x54\xd2\x91\x9a\x18\xa4\xf3\x41\xcc\x3d\x89\x0e\x6a\x36\xa9\xca\x61\x42\x53\x39\xf9\x18\xa5\xed\xad\x0a\xb7\x37\x8d\x4d\xaf\x6d\x81\x55\xb4\x4e\x2a\x54\x0c\x62\x67\x79\x4b\x28\x61\xc0\xff\x2e\x2e\xf9\xb7\x83\x3c\xae\x19\x11\xd3\x62\xef\x41\x99\xf3\x69\x01\x28\x31\x53\xd2\x94\xd0\x9f\x1e\xe4\x46\x31\x03\x51\xe4\x8a\x09\xb8\x7e\x80\x0c\x01\xc1\x12\x88\xa2\x59\x49\x21\x2b\xd0\x7a\xb8\x3a\xcf\xe6\x59\x25\x4e\xc4\x51\x31\x18\xe7\x79\xb9\x7c\x9b\xe5\x08\x1f\x34\x9c\x34\x91\x16\xc2\x54\xee\x7a\x21\x06\x24\x10\x1b\x19\xc0\x3c\xbe\xbb\x10\x6c\x5e\x66\x45\x45\xe8\x2c\x4e\x48\xd3\xf6\xcf\x31\xc1\xf0\x5c\x65\x89\xbd\x7d\x65\xc9\x13\x06\x5d\xe9\x5f\x35\xab\x40\x99\x54\xc1\xba\x46\x58\xaf\x98\xcd\x87\x13\xd4\x9b\x27\xb4\x97\x15\x95\x3f\xb8\x4c\x72\x5a\x87\x62\xdd\x48\x68\x5b\x0c\x4a\x3f\xa8\x2d\x27\x1a\x3c\xcd\x87\xfd\xce\x1e\x59\x71\xe3\xf9\xb0\xf9\x34\xd3\x7c\x23\xa8\x68\x4d\x06\x8f\x94\x87\x9e\x92\x65\xdf\x71\x35\xb0\xbd\xcd\x72\xa1\x43\x0c\x4d\xb7\xd6\x79\xdf\x59\x32\x0e\x1d\x27\x1d\x52\x9d\x66\xc0\x6b\xe0\xb0\xde\x6c\xab\xa4\x56\xd8\x1a\xc1\x3c\xfe\x44\xbc\x61\x84\xf9\xcf\xe4\x4c\x86\x1c\xc5\x99\x01\xc8\x01\xce\x7a\xb3\x6b\xb4\x10\x45\x24\x4e\x6e\xa5\x33\x43\x52\xe6\xf5\xbc\x60\x18\x6d\x80\xc6\xc5\x0d\x81\xf0\x40\x0c\x01\x46\x8e\x8d\xb0\x10\x56\xba\x6a\x1a\xb5\x87\xb3\x3d\x81\xb6\x7d\xc4\x6e\x61\x17\x49\x46\x10\xdf\xdd\x91\x22\xf5\x8c\xc1\x00\xdc\xa6\x31\x48\xb6\xad\x0b\xfe\x00\x84\xa4\x24\x42\x04\x11\x6a\x18\x44\x11\xf7\x23\x11\x61\x36\xb2\x0f\x13\x11\xb5\x86\x04\xb8\x3a\x24\x2c\x79\x4c\x0a\x15\xf5\x0c\x19\xe4\x50\x00\x2e\xf4\x44\x80\xc3\xf1\xf4\xc0\x1d\x12\xe3\x11\x36\x37\x71\xb9\xff\x47\x33\xb9\xbf\x96\xc7\xa6\x01\x52\xa4\xd0\x3e\x12\xbf\x24\x60\xfb\xc6\x11\xd0\x7c\x12\xca\x2c\x14\xab\x2b\x7c\x13\xc8\x86\x9d\x22\xec\x02\xb0\x21\xba\x1e\x1c\xc0\xd8\x90\xdc\x86\xd4\x83\x32\x8f\x8b\x14\xca\x59\x4f\xf4\x4d\xfa\x91\xa1\xe6\x79\xfa\x71\x9a\x26\x9b\x81\x47\x16\x10\xa2\x94\x47\x25\xb8\x59\x51\xb9\x3e\x9f\x73\x2c\xed\x59\xd1\xc9\x87\x21\xb5\x15\x64\xf9\x6b\x9c\x8b\x5b\x63\x4d\xc0\x73\x1c\x2b\xa6\x5d\xf4\x75\x05\x23\xf8\x11\xdc\x4b\x18\x81\x20\xa6\x76\x18\xca\x73\x1c\xc1\x38\xc9\x19\x81\x3e\xf7\x22\x30\x7e\xa1\x00\x82\xc8\xba\x98\xfd\x67\x8b\x70\x71\x79\xfd\x50\x91\x2f\x14\x41\x10\xf9\x73\x45\x70\x1c\x2e\x84\xc6\xf1\x53\x20\x6d\x43\xb5\x69\x5e\x54\x78\x2b\xe1\x3d\x13\x2a\x1a\x02\xa6\xde\x9c\x5d\x55\xe5\x15\xcb\xb3\x84\xd8\xf9\x92\x95\xa4\x59\xd1\xc9\x57\x98\x86\x17\xe5\x1d\xa1\x71\x95\x95\x85\x4a\x6f\x43\x3d\x27\xe8\x8b\x83\x6d\x67\xe0\x3b\x93\x32\x37\xd6\xe3\xd0\x32\xab\x6e\x21\x3c\x22\xd5\xbb\x32\xcd\x66\x19\xde\x05\x62\xae\xa3\xa6\x56\x3b\x4e\x14\x35\x4d\xa8\xbe\x34\x0d\xb7\x6e\x49\xb9\x85\x91\xb4\xe5\x66\xe0\xaf\x8e\x4b\x00\x83\x0f\xbe\xa6\x29\x41\x90\x0a\x6b\xda\xa2\x29\x1c\xbc\xad\x8b\x04\x8d\x87\xe9\xa4\x77\x1f\xe7\xd0\x34\x06\x5d\x5c\xb5\xd3\x34\xf6\x5e\x85\x05\x47\x18\x77\x89\x62\x1b\xd9\x66\xd3\x1a\x93\xf7\x31\xe6\xd6\xec\x23\x4e\xc3\x85\x9d\xda\xea\x45\x7a\x81\x8e\x8b\x6a\x24\xb8\x8f\x73\xdf\x3c\x2b\x8c\xe9\x0d\x66\x34\x6a\x81\x35\x97\x94\x45\x9a\x21\x97\x30\xe2\xc1\x74\xbf\x48\x27\x14\xb9\x15\xe6\x31\xa0\x0a\x7c\x34\x3c\x50\x1b\xda\x16\x81\x6b\x10\x4b\x43\x99\x4d\x6b\x96\xd4\x48\x00\x4b\x5e\x92\xf2\xa5\xaa\x78\x4b\xe5\x77\x6d\x3f\x52\xa4\xda\xd6\xfa\x33\xff\xa8\xf1\x34\x00\xff\x67\x14\xba\xa8\x01\xc0\xca\x25\xce\xf3\x81\x8a\xf6\xef\xe2\x11\xc7\xc5\x26\xa7\x68\x9a\x68\x07\x42\xd8\x89\xbe\x06\xc7\x08\xc3\xf0\x3f\xe0\x1b\x68\xe2\xab\x00\xee\x91\x90\x50\xcf\x7d\x9c\xcb\x94\x02\xff\xf8\xc2\x0d\x0e\x04\xf7\x32\x8b\x30\xf1\xf9\x87\xfb\xd2\xf1\x29\x78\x2e\xec\x42\x7a\xfd\x4b\x4d\x18\x6e\x7b\x5b\xd2\xe9\x22\x3f\x2e\xbc\x9c\x14\xa8\x3e\xdf\x87\x5d\x70\xfd\xbf\x93\x93\xa9\x5c\x0a\x31\x3a\xbc\xe2\x11\x52\xc0\xaa\x98\x56\x48\x82\x4b\x05\x49\x5e\xc7\x8c\xb0\xe7\xb0\x30\x55\x14\x64\x75\x34\xc4\xc3\xda\x64\x9d\x63\xf9\xaa\x2a\xa7\x8b\xdc\xf3\xc1\x13\x9e\x10\x58\x48\xf3\x11\xae\xdb\x5b\x0e\x5b\xe4\x1f\x95\xe6\xf1\xdf\x7d\x84\x46\x87\xdd\x9a\x11\x76\xce\xe9\xd4\xda\x42\x2e\xe6\xa7\x8e\xae\x91\xf8\x72\x77\x07\xed\x9b\xcd\x00\xad\x6e\x14\x50\x3e\xfc\x0f\xec\x09\xcf\x30\x36\x8c\x64\xc6\xc4\xc2\xff\x2d\xb3\xa2\x57\x70\x05\xc0\xe9\xb7\x82\x39\x56\x51\x4e\x7f\x3a\x3e\x19\x1f\x9c\x03\x62\xcd\x20\xb4\x0b\x2e\xbc\x3d\x9b\xbc\xe3\xe8\x14\xe1\x88\x57\xad\xd3\xe4\x96\xcc\xc9\xa4\xae\xa0\x6d\x45\x9f\x51\xb2\xa6\xce\x3d\xa7\xd9\xdc\x33\x64\x77\xc1\xf5\x25\xaf\x10\x45\xff\xc5\xbd\x8f\xc5\xb3\xea\x81\x73\x2e\xd8\xd8\x1d\x81\x0b\x1f\x7f\x1e\x9f\x8d\x05\x1b\x6a\xb7\x60\xd6\x14\x5f\x96\x35\x86\xf0\xb2\x24\x7c\xbd\x22\x79\x57\x01\x49\xb9\xad\xd3\x26\x67\x87\xe3\x33\xf8\xe9\xff\xf9\x81\x82\x86\x79\x9a\x6a\xa7\x7c\x33\xd2\x4a\x36\x36\x9f\x1c\xbf\x3b\x96\x1a\x13\xdd\xd7\xf0\xb8\x2a\x63\x4f\x6e\x52\x3a\xe6\x64\xcc\x3e\xc9\x0a\x1d\xd8\x3f\x39\x99\x7c\x84\xb7\xc7\x27\xe7\xe3\xb3\xe3\xd3\x23\x57\xee\xec\x5a\x98\x62\xb5\x81\xa0\xd5\x6a\x72\xa5\x98\x3c\x22\xd5\x59\xb9\x04\x8f\x11\xc6\x30\xda\xec\xf0\xbe\x6f\x38\x15\x5f\x7d\xf0\x76\x7a\x36\x15\x9d\x08\x68\xdb\x80\xf7\x95\x39\x80\x1d\x0c\xa5\x84\xf2\xff\x4a\x5e\xef\x38\x5d\x8b\xe9\x95\x46\x50\x0f\xdb\x75\xa8\x7c\x43\x29\xf2\xa4\xbc\xe1\x67\x1c\x2c\xf2\x33\xb2\x08\xfb\xcd\x0f\xa1\x93\xff\x3b\x38\x29\x6f\x3c\x49\xb1\x23\xe8\x6b\x8b\x2c\x78\x07\x1a\x6d\x2c\x84\x08\x79\x4b\xda\x5b\xe1\x21\x0c\x43\x5f\xf2\x4e\xcb\x25\xac\x15\x74\x7b\xcb\x89\xa2\xeb\x07\x98\x2e\xf2\xcf\xfc\x33\x17\x75\x04\x5c\x53\x9f\xf1\x3a\xf5\x70\x7f\xc0\xcf\x45\x8a\xb4\x5c\x32\xd4\x8e\x68\xc3\xf4\x1a\x38\xc7\x15\xa1\x1e\x5f\x1a\xf2\x8f\x7e\xf0\xca\x17\xd2\xe3\x8e\x6f\x46\x50\x64\xa2\x2f\xfd\x44\x85\x80\xf1\xc7\x55\x33\xa6\xd4\x23\x94\xfa\xdd\x14\x8f\xcb\x12\x23\x45\x96\x07\x78\x52\x07\x3b\xf4\x15\xe4\xd8\x87\x91\xc2\xaf\x51\x32\xe0\x7a\xf1\x80\x10\x9e\x92\xa5\xe7\x92\xf9\x5d\xf5\x80\xfa\x62\xaa\x3c\x6e\x79\x35\x64\x70\x82\xca\x18\xf1\x25\x17\x7b\x97\x72\x0d\x37\x0c\x2d\x97\xaa\x53\xaf\xdb\x80\x5c\xa1\x93\x02\x6f\x7c\x5b\x4f\x27\x65\x9c\x4e\x0a\x82\xac\x09\x7c\x48\x86\x68\xb9\x0c\x90\xab\x27\x63\x9b\x6d\x00\xf7\xc5\xe5\xef\x84\xf7\x57\x0c\xe8\xe7\x03\xf0\xe5\x5f\x8a\x40\xce\x5c\x07\x41\xce\x30\x7f\x02\x78\x3d\xda\x7b\x93\xfd\xd0\xe1\xf1\x4d\xb6\xbb\x2b\xf8\xe0\x58\xca\x2e\x57\xc0\x23\xf5\x13\x45\xb0\x0e\x41\xef\xe2\xe2\x41\x50\xeb\x61\x88\xad\x03\x51\xaf\x56\x17\x35\xef\x7a\x04\x41\x07\x13\x95\x53\x5a\x48\x51\x83\x82\x2c\x37\x6c\x2f\xd5\x54\x2b\xd8\x22\xff\x20\x17\xd1\xde\x6b\xca\x8c\xbf\xa4\x05\xb2\xaa\xef\x52\xd1\xae\xc7\x6c\x98\xc1\xa2\xa3\x33\x3b\x73\x34\x80\xfa\xce\x30\x8e\xc1\x5a\xd7\x18\xd3\x63\xea\x54\x5f\x7b\xb2\x75\xc8\xca\x5d\x6a\x1f\xe4\x06\xae\xaf\xd4\xf0\x7b\x73\x9c\x4e\x45\x71\x9e\xaf\xd3\xa0\x9a\xd2\x12\xc8\x81\xc0\x10\x4f\xf8\xc7\xe6\xd5\x2b\xce\x24\x39\x97\x09\xd0\x6f\x1f\xde\x1f\xee\x9f\x8f\xb5\x57\xe9\x0c\xa7\x6d\x61\x3a\x3e\x87\xdf\x44\x46\x22\x34\xa0\xb6\x3f\x23\xe9\xb1\xcc\xb8\x39\xdb\x31\xac\xf1\x3c\x3f\xb5\xe2\x8d\x14\xdc\xb6\xae\xb8\xdf\x86\xa3\x8d\xdc\x80\xea\x09\xc7\x9f\x49\xe2\xf9\x9a\x07\x3b\x7c\x3c\x12\x12\xa4\x2b\x8a\x40\xa0\xef\x08\xfb\xe6\xb1\xdc\x93\x57\x8b\xc3\xcd\xe0\x2f\x77\x4f\x01\xb8\x55\xcf\xe3\xa8\x1b\x80\x5c\x37\x9b\x92\x9c\xe7\xc0\xe6\x2e\x69\xf0\xb4\xeb\x2e\xeb\x1c\x54\x89\xaf\xb6\xf5\xbc\xc7\xd8\x12\x08\xdf\xb1\x54\x23\xab\xd1\x65\x17\x02\x74\x0d\x67\xd0\xee\x84\xd1\xf8\xd6\x43\x81\x59\x5b\x1a\xe6\x88\x6d\x77\x10\xbe\xc0\x2b\xd4\xce\x6b\x5a\xf3\x9d\x73\x2a\x1c\xc2\xe2\xde\x38\xc5\x75\x07\xbc\xc7\x3d\x1c\x9f\x8c\xcf\xc7\x08\x64\xad\x00\xa3\x76\x58\x75\xa9\x0e\xf8\xfa\x50\x45\x35\x8a\x80\xd6\x05\xf0\x8b\xec\xcb\xbd\xe0\x79\x2e\xf0\x67\xe1\x1f\xff\xb1\x7c\xc0\x70\x82\x68\x47\x3a\xc2\xbb\x98\xb1\xe3\x82\x11\x5a\x5d\xf5\xe5\xe3\x37\x1d\xf0\xa4\xc6\x9e\x08\x60\x9d\x87\x70\x4f\x50\xec\x0e\x66\x83\x3d\x86\xcd\x64\x90\x1f\x27\x1a\x5b\xec\xb6\xac\xf3\x14\x8a\xb2\x82\x6b\x02\x22\x4b\x7c\x09\x19\xe7\x93\xf0\xf1\x5b\xde\xe0\xb7\x64\xed\xb9\x23\x0e\xe5\x05\x02\x45\x73\x21\xf9\x2a\xd8\xaf\xb1\xa8\x70\xd9\x22\xc7\x3b\xfd\xb0\xcc\xf3\x98\x32\x0f\x9a\x26\x27\x85\xf9\x38\x02\x81\xde\x1c\x60\x96\xe0\x9b\x6a\x35\xa0\x78\x7c\x3a\x1d\x9f\x9d\xc3\xf1\xe9\xf9\x64\x10\x7a\x9e\x0b\xbb\x5a\x78\xb7\xd7\xb3\x67\xef\x63\x1a\xcf\xf9\x71\xe6\x32\x70\x7d\xf8\x75\xff\xe4\xc3\x78\xca\x31\x2b\xd9\x5e\x8f\xd8\x7b\x29\x14\x7f\x1f\xb6\x22\x4c\x00\x7b\x01\xe4\xc5\xce\xf7\x3e\x44\xd1\xf7\x30\xcb\x48\x9e\xb2\x5e\x14\xc0\x3c\x5b\xc7\x01\x6e\x0a\x69\x2d\xa7\x69\x5e\xf6\x5e\x8d\xda\x56\x75\xa1\xf8\x99\xda\xd1\xf1\x1b\xa7\x14\x5a\x4f\x09\x47\x93\x56\xbd\x4c\x73\x62\xb2\xbb\x63\xc5\xa2\xdf\xe3\x6e\xae\x81\x5e\x34\x32\x8c\xb0\xe0\xce\x8b\x40\x59\x26\x40\x86\x9e\xee\x89\xb8\xfa\x8f\xf2\xc4\x47\x2f\xa2\x9d\xae\xdf\x24\xdf\x3f\x5f\x98\x25\xc3\xeb\x11\xac\x14\x8e\xe2\xe6\xa2\x43\xbf\x44\x9a\xc6\xf7\xeb\xef\x2d\xed\x95\xbc\xf4\x48\x30\x4e\x76\xf7\x12\x1f\x5b\xf4\x07\xb8\x5d\x57\x6e\x29\xa7\x69\x86\x9e\x0f\xb9\x51\xb3\x19\x40\xff\x05\x51\xb5\x68\xb3\x19\xd0\x55\x48\x18\x1d\x0e\xc7\x49\x4a\x13\x48\xf8\x6d\xf8\x09\x15\xd7\x2e\xba\x85\x8b\x00\xdc\x1f\xd5\xf8\x20\x18\x07\xa1\xa8\xfa\x8e\x1c\x8d\xf2\xf9\x6d\xe0\x01\x71\x33\xfb\xc8\xbf\xeb\x7e\x1d\x02\xa8\x5e\xf8\x5f\xcd\x45\xd7\xaa\xd5\x9f\xba\x3e\x00\x1e\x3f\xdc\x07\x30\xc3\x7e\x12\x17\x3c\xd0\x8b\xe8\x0e\xba\x25\x10\x5a\xf9\x0a\x4a\x36\xa9\xab\x95\x24\x41\x8a\xc8\x93\x1b\x67\x31\xb4\x62\xa1\xa7\x93\x05\xaf\x76\x5c\x79\x52\x56\x54\xe5\xda\x60\x0d\xf2\x3c\xde\xe6\xbe\x8f\xf3\x9a\x30\x31\xbe\xd0\xa3\xee\xda\xba\xdc\x76\x65\xfd\x8a\x20\xa2\x56\xb2\xc8\x55\x5c\xe2\x36\x94\x95\xb5\x1d\x92\x70\x91\x8a\x47\xd0\x05\xa4\xa7\x96\xd5\x9b\x18\xe8\x42\x96\xc0\x10\xfe\x47\x57\x8b\x61\x33\x8e\x19\x79\xf3\xda\xe8\xf3\x53\x5c\x25\xb7\xde\x35\xfe\xff\x9f\x00\xf4\x4f\x00\xfa\x27\x00\x7d\xb5\x01\xc8\xf5\xb2\x02\xb8\xa3\xfa\x6e\xf0\x35\x46\x23\xce\xdb\xc0\xd1\x56\xd7\xad\x0b\x4c\x1b\x43\xd3\x23\x25\xbd\x1d\x99\x8c\xea\xc1\x49\x09\xb7\xd5\xc6\x5f\x4d\x22\xa6\x04\x44\xba\xf7\xf3\x2c\xe8\xde\xca\xdf\xc7\xb4\xe2\xa5\xb1\x19\xad\x64\x1a\x2c\x7f\xf0\xf3\x22\x83\x3d\xbf\xcb\xa7\x53\x92\xab\x77\x69\x1b\xec\x57\xe3\x85\x47\x87\xa7\xba\xd4\x5a\x39\x62\x47\x6b\xbf\x48\xaf\xbe\x80\x5e\x97\xa8\x77\x0f\xb1\x58\xfd\xf4\x84\x0e\x0f\xf2\x9a\x55\x84\xae\x88\xd9\xb1\xb0\xe6\xf8\xe1\xa3\xbb\xc3\xcc\xa4\x1d\x89\xd9\xe6\x14\xcb\x6d\x18\x8a\x0c\xdd\x71\x7a\x79\xf8\xca\x35\x37\x8b\x73\x66\xdc\x73\xbd\xfe\x50\xaf\xff\x0b\xaa\xd3\x9d\x55\x84\x2a\x10\xe1\x40\x00\xc6\x6f\xa4\xe5\x03\x40\xbf\xf5\x0f\xbd\xde\x7f\x57\x56\xaf\xa6\xf8\x3c\x72\x71\x8a\x3f\xc0\x2b\xe1\x27\xfa\xe5\x8b\xfc\xb7\xee\x51\xf3\x0e\x37\x42\x6c\xef\x0d\x64\xf0\x83\xd8\xf2\x06\x74\x8b\x7b\xae\xeb\xc0\xe1\xdf\x09\x07\xf0\x6a\xcf\x97\xbd\x70\x5c\xfa\xdd\x2a\x2f\xe2\x77\x0b\xd9\x0c\x50\xe4\xf0\x5d\x7c\x37\x4d\xe2\xc2\x9b\xab\x27\x66\x67\xdd\x55\xcc\xf7\xdc\xc7\x79\x00\xe5\x27\xce\xc5\xca\xef\xca\xdc\xcb\x37\x38\xa7\x7e\x59\x31\x58\x2e\x82\x78\x6a\x90\x3f\xcd\xc0\x3b\x20\xf4\xf4\xc0\x84\x66\x37\x59\x11\xe7\x6d\xeb\xab\x9f\x13\x45\xd1\x3a\x32\xf6\x56\x75\x77\x39\xfa\x57\x2a\x1d\xd2\x04\x2f\xc6\xcd\x23\x1a\xfb\xe2\xc9\xc8\x71\x5a\x50\x4f\x53\x8e\xe3\x5c\x53\x12\x7f\x32\x63\x96\x8c\x9b\x5c\x59\x07\x79\xc9\x88\x37\xf0\x46\xa0\x62\xd6\xbf\x03\x00\x00\xff\xff\x09\x1a\xa4\x84\x72\x33\x00\x00")

func modelTplGoBytes() ([]byte, error) {
	return bindataRead(
		_modelTplGo,
		"model.tpl.go",
	)
}

func modelTplGo() (*asset, error) {
	bytes, err := modelTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.tpl.go", size: 13170, mode: os.FileMode(438), modTime: time.Unix(1537088923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _models_typesTplGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xf3\x30\x10\x84\xcf\xda\xa7\x58\x7c\xf8\xf9\x1b\x52\xeb\x1e\xc8\x29\x85\x1c\x5a\xda\x52\x7a\x0f\x8a\xbd\x55\x4d\x65\xc9\x91\xe4\x90\x20\xf4\xee\x45\x92\x9b\x26\x6d\xa0\x17\xb3\x8c\xbd\x33\xdf\x8e\x07\xd1\x7c\x08\x49\x18\x42\xfd\x5c\xc6\x18\x01\xba\x7e\x30\xd6\xe3\x7f\x40\x44\xac\xc8\x5a\x63\x5d\x05\xac\x72\xde\x36\x46\xef\xa7\xb1\xd3\xd2\x55\x00\xac\x92\x9d\x7f\x1f\xb7\x75\x63\x7a\x2e\x4d\xb3\x53\xe5\x59\xc1\x0d\x40\x08\x56\x68\x49\x58\xbf\x8a\xad\x22\x87\x31\x02\xf3\xc7\x21\x05\x4e\xda\xa3\xe8\x69\x6d\x30\x46\x74\xde\x8e\x8d\x0f\xc0\xd8\x69\x6b\x65\xd4\xd8\xeb\xb2\x96\xe4\xdb\x2f\x29\x6f\x3d\xa5\xad\x6c\x74\x1c\x26\x0f\xce\xb3\xf0\xfd\x51\x12\xb3\x74\xdf\xe9\xb6\xf8\x84\x40\xba\x4d\x67\x32\xb6\xa1\x43\xe7\xbc\x9b\xe3\xa6\x25\x45\x9e\x5a\xdc\x1a\xa3\x80\x45\xe0\x33\x58\x2c\xf1\xdf\xa1\xa9\xaf\x90\x06\xc8\x2c\x57\x20\x2f\xc3\x33\xe1\x22\x95\x9b\x08\xef\xe8\x4d\x8c\xca\xaf\x4d\x8c\xf3\x62\x40\x05\x69\xc6\x53\x51\x13\x14\xe7\xa8\x8c\x74\xe8\x73\x61\x90\xcb\x7a\x30\x32\x13\xac\x76\xea\xd4\x52\xfa\x35\x57\xda\x2d\xf2\x2f\xe2\x7c\x56\x79\x97\x63\x53\x52\x04\xd8\x0b\x7b\x6e\xfe\x42\x3b\x5c\x9e\x0b\x97\x87\xfe\x95\xb2\x40\x6f\x47\xc2\xf9\x8f\xa0\x08\x9f\x01\x00\x00\xff\xff\x74\xa3\x8d\x06\x66\x02\x00\x00")

func models_typesTplGoBytes() ([]byte, error) {
	return bindataRead(
		_models_typesTplGo,
		"models_types.tpl.go",
	)
}

func models_typesTplGo() (*asset, error) {
	bytes, err := models_typesTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_types.tpl.go", size: 614, mode: os.FileMode(438), modTime: time.Unix(1537088701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _not_usedGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x6b\xdb\x30\x14\x7d\xae\xc1\xff\xe1\xcc\x4f\x76\xe6\xc8\x7d\xe9\xcb\xc0\x0f\xa3\x0b\xa5\xd0\xa6\x5b\xd3\x95\x41\x29\x45\x75\xae\x13\x53\x59\x8a\x25\x7b\x59\x11\xfa\xef\x43\xfe\xc8\xb2\xb0\xe5\x21\x46\xf7\xe3\xdc\x73\xcf\x3d\x61\x90\xcd\xc2\x20\xcb\xa4\x6a\x51\x2a\x0d\xa9\xf6\x98\xcf\xf1\xda\xb5\x78\x23\xda\xa1\xdd\x56\x26\x0c\xca\x4e\x16\xb8\xe5\xc6\x5c\x4b\x43\xba\x7d\xb1\x96\x3d\xf0\x57\x41\x4b\x5e\xd3\x95\x72\x2e\xd6\x6a\x6f\xf0\xf4\x3c\x3b\x4d\xa4\x30\x64\x4c\xa5\x24\x66\x1b\x55\x34\x82\xad\x86\x67\x02\xd2\x5a\x69\xd8\x30\x00\x80\xaa\x84\x20\xd9\xa3\x24\xc8\x73\x9c\x4f\x09\xff\xd3\xd4\x76\x5a\x0e\x0d\x86\x2d\x69\x1f\x47\xfd\x38\x23\xaa\x82\x60\xb6\xaa\x13\x6b\x78\xfe\xaf\x04\xaa\x77\xed\x3b\xe6\xa8\x7a\x9e\xd4\xc7\xb7\x95\xdc\x44\xc9\x80\xe7\x86\xcf\x4f\xae\x3d\xde\x80\x39\x84\x84\xc4\xa7\xfc\x0f\x8b\x91\x97\x34\x8f\x5c\x18\x9f\xd9\x92\xd8\x91\x66\xab\x46\xdc\x72\xf9\xfe\x45\x09\xc1\xb5\x89\x61\xad\x20\x09\x76\xa9\x44\x57\x4b\x03\xe7\x90\x1e\x30\xd2\x56\x77\x34\x22\x0d\xff\xa6\x11\xa6\xd5\x1e\x2e\xba\x5e\xae\x16\xf7\x0f\xb8\x5e\x3e\xdc\x61\x52\x6d\x55\x6c\xa9\xa6\xbb\xae\x75\x0e\x71\x84\x8f\x07\x0d\x22\x58\x3b\x0d\xf1\xd2\x9a\xaf\x5c\xf3\xba\x1f\x77\x5c\x86\x28\xc1\xe3\xe7\x9b\xef\x8b\x95\x0f\x4f\xec\xc3\x60\x28\xc8\x32\xe8\x4e\xa2\xe9\x48\xbf\x4f\x32\x0c\xbb\xd5\xfc\x8d\xe2\xa7\xe7\x4a\xb6\xa4\x4b\x5e\x90\x75\x29\xce\x53\x08\x39\xbb\x48\x90\x65\x17\x28\x2b\x12\xeb\x03\x90\xf7\xc9\x4b\x0a\xad\xf6\xbe\x59\x73\xb9\x21\xf4\x17\x19\x8f\x76\x66\xed\x7c\x0c\x4f\xc2\xb8\x51\xf8\xb3\xb3\x7e\x66\x0e\xbe\xdb\x91\x5c\xc7\xfe\xd5\x23\x31\x6b\x8f\xf6\xbb\xba\x73\x2e\x39\x02\x23\xb9\x9e\x10\xdc\xc4\xa2\x2a\x71\xa3\x36\xbd\x6e\x97\x8d\xb8\xa7\x86\x9d\x9a\xef\xd8\x44\xe3\xf9\x7e\x5c\xde\xa8\x4d\x1c\x1d\x79\xd9\x9f\x1c\x39\x22\xbf\x6e\x3a\x1d\x28\xf5\xbc\xfe\xb6\x8c\xb7\x4b\x3e\xb9\x99\x7d\xf3\x22\xc6\x43\x75\xda\xeb\xc8\x18\x4b\xd8\xe2\x17\x15\x71\x72\xe0\xe7\x7b\x3e\xe4\x90\x95\xf8\x1f\x95\x85\xd6\x31\x69\x9d\xfc\xcb\xed\x27\xfb\x8e\x09\x59\x89\x30\x70\x61\x30\xcb\xc2\xe0\x77\x00\x00\x00\xff\xff\xae\xa5\x48\xae\xbd\x03\x00\x00")

func not_usedGoTplBytes() ([]byte, error) {
	return bindataRead(
		_not_usedGoTpl,
		"not_used.go.tpl",
	)
}

func not_usedGoTpl() (*asset, error) {
	bytes, err := not_usedGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_used.go.tpl", size: 957, mode: os.FileMode(438), modTime: time.Unix(1536578275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common.tpl.go": commonTplGo,
	"model.tpl.go": modelTplGo,
	"models_types.tpl.go": models_typesTplGo,
	"not_used.go.tpl": not_usedGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"common.tpl.go": &bintree{commonTplGo, map[string]*bintree{}},
	"model.tpl.go": &bintree{modelTplGo, map[string]*bintree{}},
	"models_types.tpl.go": &bintree{models_typesTplGo, map[string]*bintree{}},
	"not_used.go.tpl": &bintree{not_usedGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

