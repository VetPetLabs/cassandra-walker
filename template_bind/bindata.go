// Code generated by go-bindata.
// sources:
// templates/common.tpl.go
// templates/model.tpl.go
// templates/models_types.tpl.go
// templates/not_used.go.tpl
// DO NOT EDIT!

package bind

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commonTplGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xef\x6f\xdb\x36\x10\xfd\x2c\xfe\x15\x6f\xc4\x86\x48\xb0\x26\x27\x5f\x93\x78\xc5\x96\xb5\xc0\x86\x74\x68\xe7\x61\x1b\x60\x04\x05\x2d\x53\x1a\x3d\x9a\x74\x48\x2a\xae\x67\xf8\x7f\x1f\x8e\xa2\x5c\xe5\x57\xf5\x45\xe4\xf1\xee\xdd\xbb\x77\x47\x6e\x45\xfd\xaf\x68\x25\x0e\x87\xea\x43\xbf\x3c\x1e\x19\x53\x9b\xad\x75\x01\x39\xcb\xb8\x0f\x4e\x99\xd6\x73\x96\xf1\xe5\x3e\xc8\xb8\x68\x36\x81\x33\x00\xe0\xda\xb6\x9c\x15\x6c\xfa\xe4\xc3\xad\x6d\x3d\xde\x75\xa6\xf6\x78\x7a\x46\x1f\x9b\x4e\xa1\x6d\x8b\x26\x7a\x08\x27\xf1\x20\x9c\x12\x4b\x2d\xa3\xa9\x84\xb7\xd8\xdb\x0e\xb5\x30\x38\x53\x66\x2d\xeb\x70\x46\x06\x07\xbb\x93\x06\x75\xe7\x83\xdd\x10\x82\xaf\x20\x3f\xc3\xcb\x80\xcf\xd5\xdf\x37\xb7\xb6\x7d\xeb\x1c\x66\x11\x24\x97\xce\x41\x3a\x67\x5d\x81\xc3\x11\x8d\x75\x30\x36\x50\x50\xab\x4c\xcb\xd8\x83\x70\xf8\x5a\x48\x2c\x50\x35\xb4\xc7\x37\x33\x18\xa5\x93\x8d\x3e\x6d\xdb\xea\x83\x53\x26\x68\x43\x41\x45\x3c\x38\xb2\xe3\x08\x76\xc0\xf4\xc1\xa1\xaa\x2a\x65\x82\x74\x8d\xa8\xe5\xe1\x38\x02\xd7\xd2\x90\x43\x81\x1f\x70\xfe\x0a\x3c\xbf\xf9\x78\x7b\x09\x5e\x82\xfc\xbe\xe4\x79\x24\xf7\x5b\xb3\x82\x6d\x7a\xd5\x9f\x8b\xfd\xbc\x3d\x37\xd6\xf8\x20\x4c\x78\xa9\x3b\x8c\x85\xfd\x56\x62\xf7\x8f\x74\xf2\x46\x8b\xce\x4b\xca\xdc\xd5\x01\x07\x96\xd5\xd6\xac\x54\x50\xd6\xa0\x9f\x0b\x96\x09\xd7\xfa\x9e\xf4\xe2\x6e\x54\x23\x51\xa4\xf2\x07\x9c\xce\x4b\xff\x87\x9d\xdf\xeb\x3c\x1a\x3c\x16\x77\xa3\x0c\x65\xef\x36\x97\xdb\x84\x5b\x20\xef\x17\xe5\x63\x58\x92\x2e\x23\x89\x7b\x94\x1f\x9d\xc3\xe2\x6e\xa0\x42\x2d\xfe\x54\x62\x87\xcb\x19\x9c\x30\x6d\x2a\xc2\x53\x4c\xf6\x25\x60\x06\xb1\xdd\x4a\xb3\xca\x4f\xa6\x12\xbb\xea\x54\x59\xc1\xb2\x23\x4b\xee\xf3\xe0\x08\x2c\xdd\x81\xea\x57\xab\xcc\xa3\xa8\x44\xba\x60\x3d\xa9\xa8\xc5\x63\x19\xbe\x4e\x2a\x06\x9c\xf8\xd0\x8e\xa8\xd0\xbf\xaa\xaa\x9e\x88\x93\xa1\x73\x06\x27\x3e\x65\xcc\x42\xf2\xf6\xfa\xfa\x7b\xfd\x5e\x98\xfd\xcf\x56\x6b\xe1\x7c\x5e\x5b\x3d\x57\xff\xc9\x12\x4e\x6e\xa5\x08\x50\x26\x94\x50\xfe\xfd\xde\xdf\x6b\x2c\xad\xd5\x45\xaa\x86\xf2\x4f\xa7\xc3\xc9\x0c\xc1\x75\x92\x65\xaa\x39\x39\x13\x3f\x3f\xae\xfe\xf7\x88\x98\xf3\x37\x25\x2f\x91\xf2\x14\xd1\x69\x06\x9e\x73\x4c\xe0\x17\xe7\x97\x71\xa2\x8b\xef\x2f\xee\x30\x01\x2f\x4a\xce\xb2\x4c\x19\xff\xa7\xd0\xfe\xd3\x0b\x60\x7e\x20\x4a\x12\x0e\xb5\x0e\xfe\x8b\x73\x5c\xc6\x1b\x32\x18\x08\x96\x44\x61\xd9\xb2\x6b\x1a\x82\x8b\x4f\x52\xf5\x9b\xdc\xfd\xd4\x35\x8d\x74\xf3\x88\x9e\x73\x5e\xb0\xac\x36\x81\x3c\x2e\xfa\x16\x28\x5a\x9f\x5f\x41\xe1\x3a\x65\xbc\x82\x9a\x4c\x62\x95\x04\x56\xfd\xe5\x54\x90\x43\x7c\x4e\x00\x31\x6e\x9d\xe2\xd6\xb8\x1e\x6a\xbe\xc2\x3a\x05\x3e\x8f\x6c\x36\xa1\x9a\x6f\xe9\xe6\x36\x39\xff\xf6\xbb\x15\x29\x65\x42\x41\x68\xa4\xed\x7a\x72\x41\x6f\x49\x02\xea\x31\x5e\x48\x5f\xc6\xf4\xd4\xfd\x8c\xca\x98\x4c\x58\xbf\x79\xee\x59\x44\x4f\xea\x5a\x8f\x9c\xba\xfe\x32\xb9\x84\x7b\x1c\xcf\x55\x74\x4a\xe7\xc5\xe9\xd2\xae\x96\x1f\x3b\xe9\xe9\x36\xbc\xb3\x6e\x7e\xaf\x7f\x31\xb9\x27\xc2\xca\x84\xf1\xfc\xa8\x06\xd1\x7c\x8d\x8b\x98\x32\x61\x72\xde\x37\x69\x38\x9e\xcd\x9e\x9c\xbf\x49\x0e\xaf\x8f\x97\xef\x67\x8b\x46\xcb\x9f\xc6\xa0\x1f\xab\xe9\xd4\xc9\x8d\x7d\x90\xd0\xc2\x07\x9c\x95\x67\xa7\x5a\xfc\xd3\x77\x71\xfc\x36\xbe\xfa\xe4\xb1\xff\x03\x00\x00\xff\xff\x98\xe7\xc2\xfc\x03\x07\x00\x00")

func commonTplGoBytes() ([]byte, error) {
	return bindataRead(
		_commonTplGo,
		"common.tpl.go",
	)
}

func commonTplGo() (*asset, error) {
	bytes, err := commonTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common.tpl.go", size: 1795, mode: os.FileMode(438), modTime: time.Unix(1537089558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _modelTplGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7b\x6f\xdb\x46\x12\xff\x9b\x06\xfc\x1d\xa6\x44\x5a\x90\x0e\x43\x3a\x07\xf4\xfe\x48\xaa\x2b\x5c\x5b\x71\x7d\x70\xac\xd4\x72\x9a\x3b\x18\x86\x4b\x93\x2b\x9b\x17\x8a\xb4\x76\x49\x2b\x06\xc1\xef\x7e\x98\x7d\x71\x97\xa2\x64\xbb\xe9\x23\x05\x6a\xa0\x8d\xb4\x8f\xd9\x79\xfc\x66\x76\x66\x56\xb7\x71\xf2\x31\xbe\x26\xd0\x34\xe1\x21\x29\x26\x75\x15\xbe\x13\x23\x6d\xbb\xbd\xb5\xbd\x95\xcd\x6f\x4b\x5a\x81\xb7\xbd\x05\x00\xe0\x12\x4a\x4b\xca\xdc\xed\x2d\xc7\x65\x15\x4d\xca\xe2\x4e\x7d\xce\x8a\x6b\x1c\xc7\x6f\xd7\x59\x75\x53\x5f\x85\x49\x39\x8f\xae\xcb\x64\x91\x8b\xff\xbb\xdb\x5b\x3e\xce\x47\x8f\xfe\x83\x9f\x6a\x42\xef\x81\x91\x9c\x54\x25\x85\xfa\x36\x8d\x2b\x42\x21\x2e\x52\x48\x71\x8c\x50\x58\xbb\x17\x4f\x9a\xd5\x45\x02\x5e\x0c\x3b\x4d\x13\x9e\xc5\x57\x39\x39\x89\xe7\xe4\xb0\x6c\x5b\x1f\xc6\x9f\x32\x56\x31\xcf\x87\xab\xb2\xcc\xa1\xd9\xde\x72\x28\xa9\x6a\x5a\x40\x1c\x5e\x12\x3e\xb7\xbd\xd5\x3e\x40\xe3\x80\xf3\x90\x0e\x13\x11\x0c\xa6\x92\xca\xf6\x56\xd3\xbc\x80\x67\x92\xeb\xb3\xfb\x5b\x02\xaf\x46\x70\x4b\xb3\xa2\x9a\x81\xfb\x35\xfb\x9a\x5d\x0a\x6a\xd4\x85\xf0\x1d\x25\xb3\xec\xd3\x8f\x59\x9a\x92\x02\xec\x43\x25\x1d\xa9\x89\x41\x3a\xef\xc5\xdc\xa3\xe8\xa0\x66\x93\xaa\x1c\x26\x34\x95\x93\x0f\x51\xda\xde\xaa\x70\x7b\xd3\xd8\xf4\xda\x16\x58\x45\xeb\xa4\x42\xc5\x20\x76\x96\x37\x84\x12\x06\xfc\xef\xfc\x82\x7f\xdb\xcf\xe3\x9a\x11\x31\x2d\xf6\xee\x97\x39\x9f\x16\x80\x12\x33\x25\x4d\x09\xfd\xe1\x5e\x6e\x14\x33\x10\x45\xae\x98\x80\xab\x7b\xc8\x10\x10\x2c\x81\x28\x9a\x95\x14\xb2\x02\xad\x87\xab\xf3\x6c\x9e\x55\xe2\x44\x1c\x15\x83\x71\x9e\x97\xcb\x37\x59\x8e\xf0\x41\xc3\x49\x13\x69\x21\x4c\xe5\xae\x17\x62\x40\x02\xb1\x91\x01\xcc\xe3\xdb\x73\xc1\xe6\x45\x56\x54\x84\xce\xe2\x84\x34\x6d\xff\x1c\x13\x0c\x4f\x55\x96\xd8\xdb\x57\x96\x3c\x61\xd0\x95\xfe\x57\xb3\x0a\x94\x49\x15\xac\x6b\x84\xf5\x8a\xd9\x7c\x38\x46\xbd\x79\x42\x7b\x59\x51\xf9\x83\xcb\x24\xa7\x75\x28\xd6\x8d\x84\xb6\xc5\xa0\xf4\x83\xda\x72\xa2\xc1\xd3\x7c\xd8\xeb\xec\x91\x15\xd7\x9e\x0f\x9b\x4f\x33\xcd\x37\x82\x8a\xd6\x64\xf0\x48\x79\xe8\x09\x59\xf6\x1d\x57\x03\xdb\xdb\x2c\x17\x3a\xc4\xd0\x74\x6b\x9d\xf7\x8d\x25\xe3\xd0\x71\xd2\x21\xd5\x69\x06\xbc\x06\x0e\xeb\xcd\xb6\x4a\x6a\x85\xad\x11\xcc\xe3\x8f\xc4\x1b\x46\x98\xff\x44\xce\x64\xc8\x51\x9c\x19\x80\x1c\xe0\xac\x37\xbb\x46\x0b\x51\x44\xe2\xe4\x46\x3a\x33\x24\x65\x5e\xcf\x0b\x86\xd1\x06\x68\x5c\x5c\x13\x08\xf7\xc5\x10\x60\xe4\xd8\x08\x0b\x61\xa5\xcb\xa6\x51\x7b\x38\xdb\x13\x68\xdb\x07\xec\x16\x76\x91\x64\x04\xf1\xed\x2d\x29\x52\xcf\x18\x0c\xc0\x6d\x1a\x83\x64\xdb\xba\xe0\x0f\x40\x48\x4a\x22\x44\x10\xa1\x86\x41\x14\x71\x3f\x12\x11\x66\x23\xfb\x30\x11\x51\x6b\x48\x80\xcb\x03\xc2\x92\x87\xa4\x50\x51\xcf\x90\x41\x0e\x05\xe0\x42\x4f\x04\x38\x18\x4f\xf7\xdd\x21\x31\x1e\x60\x73\x13\x97\x7b\xbf\x35\x93\x7b\x6b\x79\x6c\x1a\x20\x45\x0a\xed\x03\xf1\x4b\x02\xb6\x6f\x1c\x01\xcd\x47\xa1\xcc\x42\xb1\xba\xc2\x37\x81\x6c\xd8\x29\xc2\x2e\x00\x1b\xa2\xeb\xc1\x01\x8c\x0d\xc9\x6d\x48\x3d\x28\xf3\xb8\x48\xa1\x9c\xf5\x44\xdf\xa4\x1f\x19\x6a\x9e\xa6\x1f\xa7\x69\xb2\x19\x78\x64\x01\x21\x4a\x79\x58\x82\x9b\x15\x95\xeb\xf3\x39\xc7\xd2\x9e\x15\x9d\x7c\x18\x52\x5b\x41\x96\x3f\xc7\xb9\xb8\x35\xd6\x04\x3c\xc7\xb1\x62\xda\x79\x5f\x57\x30\x82\xef\xc1\xbd\x80\x11\x08\x62\x6a\x87\xa1\x3c\xc7\x11\x8c\x93\x9c\x11\xe8\x73\x2f\x02\xe3\x67\x0a\x20\x88\xac\x8b\xd9\xbf\xb7\x08\xe7\x17\x57\xf7\x15\xf9\x4c\x11\x04\x91\xdf\x57\x04\xc7\xe1\x42\x68\x1c\x3f\x06\xd2\x36\x54\x9b\xe6\x59\x85\xb7\x12\xde\x33\xa1\xa2\x21\x60\xea\xcd\xd9\x65\x55\x5e\xb2\x3c\x4b\x88\x9d\x2f\x59\x49\x9a\x15\x9d\x7c\x85\x69\x78\x56\xde\x12\x1a\x57\x59\x59\xa8\xf4\x36\xd4\x73\x82\xbe\x38\xd8\x76\x06\xbe\x33\x29\x73\x63\x3d\x0e\x2d\xb3\xea\x06\xc2\x43\x52\xbd\x2d\xd3\x6c\x96\xe1\x5d\x20\xe6\x3a\x6a\x6a\xb5\xe3\x44\x51\xd3\x84\xea\x4b\xd3\x70\xeb\x96\x94\x5b\x18\x49\x5b\x6e\x06\xfe\xea\xb8\x04\x30\xf8\xe0\x6b\x9a\x12\x04\xa9\xb0\xa6\x2d\x9a\xc2\xc1\x9b\xba\x48\xd0\x78\x98\x4e\x7a\x77\x71\x0e\x4d\x63\xd0\xc5\x55\x3b\x4d\x63\xef\x55\x58\x70\x84\x71\x97\x28\xb6\x91\x6d\x36\xad\x31\x79\x17\x63\x6e\xcd\x3e\xe0\x34\x9c\xdb\xa9\xad\x5e\xa4\x17\xe8\xb8\xa8\x46\x82\xbb\x38\xf7\xcd\xb3\xc2\x98\x5e\x63\x46\xa3\x16\x58\x73\x49\x59\xa4\x19\x72\x09\x23\x1e\x4c\xf7\x8a\x74\x42\x91\x5b\x61\x1e\x03\xaa\xc0\x47\xc3\x7d\xb5\xa1\x6d\x11\xb8\x06\xb1\x34\x94\xd9\xb4\x66\x49\x8d\x04\xb0\xe4\x25\x29\x5f\xaa\x8a\xb7\x54\x7e\xd7\xf6\x23\x45\xaa\x6d\xad\x3f\xf3\x8f\x1a\x4f\x03\xf0\x7f\x42\xa1\x8b\x1a\x00\xac\x5c\xe2\x3c\x1f\xa8\x68\xff\x2a\x1e\x71\x54\x6c\x72\x8a\xa6\x89\x76\x20\x84\x9d\xe8\x4b\x70\x8c\x30\x0c\xff\x04\xdf\x40\x13\x5f\x06\x70\x87\x84\x84\x7a\xee\xe2\x5c\xa6\x14\xf8\xc7\x17\x6e\x70\x20\xb8\x93\x59\x84\x89\xcf\xdf\xdc\x97\x8e\x4e\xc0\x73\xe1\x39\xa4\x57\x3f\xd5\x84\xe1\xb6\x37\x25\x9d\x2e\xf2\xa3\xc2\xcb\x49\x81\xea\xf3\x7d\x78\x0e\xae\xff\x57\x72\x32\x95\x4b\x21\x46\x87\x57\x3c\x40\x0a\x58\x15\xd3\x0a\x49\x70\xa9\x20\xc9\xeb\x98\x11\xf6\x14\x16\xa6\x8a\x82\xac\x8e\x86\x78\x58\x9b\xac\x73\x2c\x5f\x56\xe5\x74\x91\x7b\x3e\x78\xc2\x13\x02\x0b\x69\x3e\xc2\x75\x7b\xcb\x61\x8b\xfc\x83\xd2\x3c\xfe\xbb\x87\xd0\xe8\xb0\x5b\x33\xc2\xce\x38\x9d\x5a\x5b\xc8\xc5\xfc\xd4\xd1\x35\x12\x5f\xee\xee\xa0\x7d\xb3\x19\xa0\xd5\x8d\x02\xca\x87\x7f\xc1\xae\xf0\x0c\x63\xc3\x48\x66\x4c\x2c\xfc\x77\x99\x15\xbd\x82\x2b\x00\x4e\xbf\x15\xcc\xb1\x8a\x72\xfa\xd3\xf1\xf1\x78\xff\x0c\x10\x6b\x06\xa1\xe7\xe0\xc2\x9b\xd3\xc9\x5b\x8e\x4e\x11\x8e\x78\xd5\x3a\x4d\x6e\xc8\x9c\x4c\xea\x0a\xda\x56\xf4\x19\x25\x6b\xea\xdc\x33\x9a\xcd\x3d\x43\x76\x17\x5c\x5f\xf2\x0a\x51\xf4\x0f\xee\x7d\x2c\x9e\x55\xf7\x9c\x73\xc1\xc6\xf3\x11\xb8\xf0\xe1\xc7\xf1\xe9\x58\xb0\xa1\x76\x0b\x66\x4d\xf1\x65\x59\x63\x08\x2f\x4b\xc2\x57\x2b\x92\x77\x15\x90\x94\xdb\x3a\x6d\x72\x7a\x30\x3e\x85\x1f\xfe\xcb\x0f\x14\x34\xcc\xd3\x54\x3b\xe5\xab\x91\x56\xb2\xb1\xf9\xf8\xe8\xed\x91\xd4\x98\xe8\xbe\x86\x47\x55\x19\x7b\x72\x93\xd2\x31\x27\x63\xf6\x49\x56\xe8\xc0\xde\xf1\xf1\xe4\x03\xbc\x39\x3a\x3e\x1b\x9f\x1e\x9d\x1c\xba\x72\x67\xd7\xc2\x14\xab\x0d\x04\xad\x56\x93\x2b\xc5\xe4\x21\xa9\x4e\xcb\x25\x78\x8c\x30\x86\xd1\x66\x87\xf7\x7d\xc3\xa9\xf8\xea\x83\xb7\xd3\xb3\xa9\xe8\x44\x40\xdb\x06\xbc\xaf\xcc\x01\xec\x60\x28\x25\x94\xff\x57\xf2\x7a\xc7\xe9\x5a\x4c\x2f\x35\x82\x7a\xd8\xae\x43\xe5\x1b\x4a\x91\xc7\xe5\x35\x3f\x63\x7f\x91\x9f\x92\x45\xd8\x6f\x7e\x08\x9d\xfc\x67\xff\xb8\xbc\xf6\x24\xc5\x8e\xa0\xaf\x2d\xb2\xe0\x1d\x68\xb4\xb1\x10\x22\xe4\x2d\x69\x6f\x85\x87\x30\x0c\x7d\xc9\x3b\x2d\x97\xb0\x56\xd0\xed\x2d\x27\x8a\xae\xee\x61\xba\xc8\x3f\xf1\xcf\x5c\xd4\x11\x70\x4d\x7d\xc2\xeb\xd4\xc3\xfd\x01\x3f\x17\x29\xd2\x72\xc9\x50\x3b\xa2\x0d\xd3\x6b\xe0\x1c\x55\x84\x7a\x7c\x69\xc8\x3f\xfa\xc1\x4b\x5f\x48\x8f\x3b\xbe\x1a\x41\x91\x89\xbe\xf4\x23\x15\x02\xc6\x1f\x57\xcd\x98\x52\x8f\x50\xea\x77\x53\x3c\x2e\x4b\x8c\x14\x59\x1e\xe0\x49\x1d\xec\xd0\x57\x90\x63\x1f\x46\x0a\xbf\x46\xc9\x80\xeb\xc5\x03\x42\x78\x42\x96\x9e\x4b\xe6\xb7\xd5\x3d\xea\x8b\xa9\xf2\xb8\xe5\xd5\x90\xc1\x09\x2a\x63\xc4\x97\x9c\xef\x5e\xc8\x35\xdc\x30\xb4\x5c\xaa\x4e\xbd\x6e\x03\x72\x85\x4e\x0a\xbc\xf1\x6d\x3d\x1d\x97\x71\x3a\x29\x08\xb2\x26\xf0\x21\x19\xa2\xe5\x32\x40\xae\x1e\x8d\x6d\xb6\x01\xdc\xe7\x17\xbf\x12\xde\x5f\x30\xa0\x9f\x0e\xc0\x17\x7f\x28\x02\x39\x73\x1d\x04\x39\xc3\xfc\x09\xe0\xd5\x68\xf7\x75\xf6\x5d\x87\xc7\xd7\xd9\xf3\xe7\x82\x0f\x8e\xa5\xec\x62\x05\x3c\x52\x3f\x51\x04\xeb\x10\xf4\x36\x2e\xee\x05\xb5\x1e\x86\xd8\x3a\x10\xf5\x6a\x75\x51\xf3\xae\x47\x10\x74\x30\x51\x39\xa5\x85\x14\x35\x28\xc8\x72\xc3\xf6\x52\x4d\xb5\x82\x2d\xf2\xf7\x72\x11\xed\xbd\xa6\xcc\xf8\x4b\x5a\x20\xab\xfa\x2e\x15\xed\x7a\xcc\x86\x19\x2c\x3a\x3a\xb3\x33\x47\x03\xa8\x6f\x0d\xe3\x18\xac\x75\x8d\x31\x3d\xa6\x4e\xf5\xb5\x27\x5b\x87\xac\xdc\xa5\xf6\x41\x6e\xe0\xfa\x4a\x0d\xbf\x36\xc7\xe9\x54\x14\xe7\xf9\x3a\x0d\xaa\x29\x2d\x81\x1c\x08\x0c\xf1\x84\x7f\x6c\x5e\xbd\xe2\x4c\x92\x73\x99\x00\xfd\xf2\xfe\xdd\xc1\xde\xd9\x58\x7b\x95\xce\x70\xda\x16\xa6\xe3\x33\xf8\x45\x64\x24\x42\x03\x6a\xfb\x13\x92\x1e\xcb\x8c\x9b\xb3\x1d\xc3\x1a\x4f\xf3\x53\x2b\xde\x48\xc1\x6d\xeb\x8a\xfb\x6d\x38\xda\xc8\x0d\xa8\x9e\x70\xfc\x89\x24\x9e\xaf\x79\xb0\xc3\xc7\x03\x21\x41\xba\xa2\x08\x04\xfa\x8e\xb0\x6f\x1e\xcb\x3d\x79\xb5\x38\xdc\x0c\xfe\x7c\xf7\x14\x80\x5b\xf5\x3c\x8e\xba\x01\xc8\x75\xb3\x29\xc9\x79\x0e\x6c\xee\x92\x06\x4f\xbb\xee\xb2\xce\x41\x95\xf8\x6a\x5b\xcf\x7b\x8c\x2d\x81\xf0\x1d\x4b\x35\xb2\x1a\x5d\x76\x21\x40\xd7\x70\x06\xed\x4e\x18\x8d\x6f\x3d\x14\x98\xb5\xa5\x61\x8e\xd8\x76\x07\xe1\x0b\xbc\x42\xed\xbc\xa6\x35\xdf\x39\xa7\xc2\x21\x2c\xee\x8d\x53\x5c\x77\xc0\x7b\xdc\x83\xf1\xf1\xf8\x6c\x8c\x40\xd6\x0a\x30\x6a\x87\x55\x97\xea\x80\xaf\x0f\x55\x54\xa3\x08\x68\x5d\x00\xbf\xc8\x3e\xdf\x0b\x9e\xe6\x02\xbf\x17\xfe\xf1\x1f\xcb\x07\x0c\x27\x88\x76\xa4\x23\xbc\x8d\x19\x3b\x2a\x18\xa1\xd5\x65\x5f\x3e\x7e\xd3\x01\x4f\x6a\xec\x89\x00\xd6\x79\x08\xf7\x04\xc5\xee\x60\x36\xd8\x63\xd8\x4c\x06\xf9\x71\xa2\xb1\xc5\x6e\xca\x3a\x4f\xa1\x28\x2b\xb8\x22\x20\xb2\xc4\x17\x90\x71\x3e\x09\x1f\xbf\xe1\x0d\x7e\x4b\xd6\x9e\x3b\xe2\x50\x5e\x20\x50\x34\x17\x92\xaf\x82\xfd\x1c\x8b\x0a\x97\x2d\x72\xbc\xd3\x0f\xca\x3c\x8f\x29\xf3\xa0\x69\x72\x52\x98\x8f\x23\x10\xe8\xcd\x01\x66\x09\xbe\xa9\x56\x03\x8a\x47\x27\xd3\xf1\xe9\x19\x1c\x9d\x9c\x4d\x06\xa1\xe7\xb9\xf0\x5c\x0b\xef\xf6\x7a\xf6\xec\x5d\x4c\xe3\x39\x3f\xce\x5c\x06\xae\x0f\x3f\xef\x1d\xbf\x1f\x4f\x39\x66\x25\xdb\xeb\x11\x7b\x27\x85\xe2\xef\xc3\x56\x84\x09\x60\x37\x80\xbc\xd8\xf9\xd6\x87\x28\xfa\x16\x66\x19\xc9\x53\xd6\x8b\x02\x98\x67\xeb\x38\xc0\x4d\x21\xad\xe5\x34\xcd\x8b\xde\xab\x51\xdb\xaa\x2e\x14\x3f\x53\x3b\x3a\x7e\xe3\x94\x42\xeb\x29\xe1\x70\xd2\xaa\x97\x69\x4e\x4c\x76\x77\xac\x58\xf4\x6b\xdc\xcd\x35\xd0\x8b\x46\x86\x11\x16\xdc\x79\x11\x28\xcb\x04\xc8\xd0\xe3\x3d\x11\x57\xff\x56\x9e\xf8\xe0\x45\xb4\xd3\xf5\x9b\xe4\xfb\xe7\x33\xb3\x64\x78\x35\x82\x95\xc2\x51\xdc\x5c\x74\xe8\x97\x48\xd3\xf8\x6e\xfd\xbd\xa5\xbd\x92\x97\x1e\x09\xc6\xc9\xee\x5e\xe2\x63\x8b\xfe\x00\xb7\xeb\xca\x2d\xe5\x34\xcd\xd0\xf3\x21\x37\x6a\x36\x03\xe8\xbf\x20\xaa\x16\x6d\x36\x03\xba\x0a\x09\xa3\xc3\xe1\x38\x49\x69\x02\x09\xbf\x0d\x3f\xa1\xe2\xda\x45\xb7\x70\x11\x80\xfb\xbd\x1a\x1f\x04\xe3\x20\x14\x55\xdf\x91\xa3\x51\x3e\xbf\x0d\x3c\x20\x6e\x66\x1f\xf9\x77\xdd\x2f\x43\x00\xd5\x0b\xff\xa3\xb9\xe8\x5a\xb5\xfa\x53\xd7\x07\xc0\xe3\x87\xfb\x00\x66\xd8\x4f\xe2\x82\x07\x7a\x11\xdd\x41\xb7\x04\x42\x2b\x5f\x41\xc9\x26\x75\xb5\x92\x24\x48\x11\x79\x72\xe3\x2c\x86\x56\x2c\xf4\x74\xb2\xe0\xd5\x8e\x2b\x4f\xca\x8a\xaa\x5c\x1b\xac\x41\x9e\xc7\xdb\xdc\x77\x71\x5e\x13\x26\xc6\x17\x7a\xd4\x5d\x5b\x97\xdb\xae\xac\x5f\x11\x44\xd4\x4a\x16\xb9\x8a\x4b\xdc\x86\xb2\xb2\xb6\x43\x12\x2e\x52\xf1\x08\xba\x80\xf4\xd8\xb2\x7a\x13\x03\x5d\xc8\x12\x18\xc2\xff\xe8\x6a\x31\x6c\xc6\x31\x23\x6f\x5e\x1b\x7d\x7e\x88\xab\xe4\xc6\xbb\xc2\xff\xff\x1d\x80\xfe\x0e\x40\x7f\x07\xa0\x2f\x36\x00\xb9\x5e\x56\x00\x77\x54\xdf\x0d\xd6\x44\x23\x3e\xfd\xe7\xc4\xa2\x75\x47\x5b\x3d\xb7\x2e\x2c\x6d\x0c\x4c\x0f\x14\xf4\x76\x5c\x32\x6a\x07\x27\x25\xdc\x52\x1b\x7f\x33\x89\x88\x12\x00\xe9\x5e\xcf\xb3\xa0\x7b\x29\x7f\x17\xd3\x8a\x17\xc6\x66\xac\x92\x49\xb0\xfc\xb9\xcf\xb3\x0c\x76\xfd\x2e\x9b\x4e\x49\xae\x5e\xa5\x6d\xa8\x5f\x8e\x17\x1e\x1d\x9e\xea\x12\x6b\xe5\x86\x1d\xad\xbd\x22\xbd\xfc\x0c\x7a\x5d\x9a\xde\x3d\xc3\x62\xed\xd3\x13\x3a\xdc\xcf\x6b\x56\x11\xba\x22\x66\xc7\xc2\x9a\xe3\x87\x8f\xee\x0e\x33\x53\x76\x24\x66\x9b\x53\x2c\xb7\x61\x28\xf2\x73\xc7\xe9\x65\xe1\x2b\x97\xdc\x2c\xce\x99\x71\xcb\xf5\xba\x43\xbd\xee\x2f\xa8\x3e\x77\x56\x11\xaa\x40\x84\x03\x01\x18\xbf\x90\x96\xed\xff\x7e\xe3\x1f\x7a\x9d\xff\xae\xa8\x5e\x4d\xf0\x79\xdc\xe2\x14\xbf\x83\x97\xc2\x4f\xf4\xbb\x17\xf9\xa7\xee\x50\xf3\xfe\x36\x42\x6c\xf7\x35\x64\xf0\x9d\xd8\xf2\x1a\x74\x83\x7b\xae\xab\xc0\xe1\x5f\x09\x07\xf0\x72\xd7\x97\x9d\x70\x5c\xfa\xcd\x2a\x2f\xe2\x57\x0b\xd9\x0c\x50\xe4\xf0\x6d\x7c\x3b\x4d\xe2\xc2\x9b\xab\x07\x66\x67\xdd\x45\xcc\xf7\xdc\xc5\x79\x00\xe5\x47\xce\xc5\xca\xaf\xca\xdc\x8b\xd7\x38\xa7\x7e\x57\x31\x58\x2c\x82\x78\x68\x90\x3f\xcc\xc0\x1b\x20\xf4\xf4\xc0\x84\x66\xd7\x59\x11\xe7\x6d\xeb\xab\x1f\x13\x45\xd1\x3a\x32\xf6\x56\x75\x73\x39\xfa\x37\x2a\x1d\xd2\x04\x2f\xc6\xbd\x23\xda\xfa\xe2\xc1\xc8\x71\x5a\x50\x0f\x53\x8e\xe3\x5c\x51\x12\x7f\x34\x63\x96\x8c\x9a\x5c\x59\xfb\x79\xc9\x88\x37\xf0\x42\xa0\x62\xd6\xff\x03\x00\x00\xff\xff\x66\xb5\xa5\x24\x70\x33\x00\x00")

func modelTplGoBytes() ([]byte, error) {
	return bindataRead(
		_modelTplGo,
		"model.tpl.go",
	)
}

func modelTplGo() (*asset, error) {
	bytes, err := modelTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "model.tpl.go", size: 13168, mode: os.FileMode(438), modTime: time.Unix(1537293807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _models_typesTplGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xc1\x6a\xf3\x30\x10\x84\xcf\xda\xa7\x58\x7c\xf8\xf9\x1b\x52\xeb\x1e\xc8\x29\x85\x1c\x5a\xda\x52\x7a\x0f\x8a\xbd\x55\x4d\x65\xc9\x91\xe4\x90\x20\xf4\xee\x45\x92\x9b\x26\x6d\xa0\x17\xb3\x8c\xbd\x33\xdf\x8e\x07\xd1\x7c\x08\x49\x18\x42\xfd\x5c\xc6\x18\x01\xba\x7e\x30\xd6\xe3\x7f\x40\x44\xac\xc8\x5a\x63\x5d\x05\xac\x72\xde\x36\x46\xef\xa7\xb1\xd3\xd2\x55\x00\xac\x92\x9d\x7f\x1f\xb7\x75\x63\x7a\x2e\x4d\xb3\x53\xe5\x59\xc1\x0d\x40\x08\x56\x68\x49\x58\xbf\x8a\xad\x22\x87\x31\x02\xf3\xc7\x21\x05\x4e\xda\xa3\xe8\x69\x6d\x30\x46\x74\xde\x8e\x8d\x0f\xc0\xd8\x69\x6b\x65\xd4\xd8\xeb\xb2\x96\xe4\xdb\x2f\x29\x6f\x3d\xa5\xad\x6c\x74\x1c\x26\x0f\xce\xb3\xf0\xfd\x51\x12\xb3\x74\xdf\xe9\xb6\xf8\x84\x40\xba\x4d\x67\x32\xb6\xa1\x43\xe7\xbc\x9b\xe3\xa6\x25\x45\x9e\x5a\xdc\x1a\xa3\x80\x45\xe0\x33\x58\x2c\xf1\xdf\xa1\xa9\xaf\x90\x06\xc8\x2c\x57\x20\x2f\xc3\x33\xe1\x22\x95\x9b\x08\xef\xe8\x4d\x8c\xca\xaf\x4d\x8c\xf3\x62\x40\x05\x69\xc6\x53\x51\x13\x14\xe7\xa8\x8c\x74\xe8\x73\x61\x90\xcb\x7a\x30\x32\x13\xac\x76\xea\xd4\x52\xfa\x35\x57\xda\x2d\xf2\x2f\xe2\x7c\x56\x79\x97\x63\x53\x52\x04\xd8\x0b\x7b\x6e\xfe\x42\x3b\x5c\x9e\x0b\x97\x87\xfe\x95\xb2\x40\x6f\x47\xc2\xf9\x8f\xa0\x08\x9f\x01\x00\x00\xff\xff\x74\xa3\x8d\x06\x66\x02\x00\x00")

func models_typesTplGoBytes() ([]byte, error) {
	return bindataRead(
		_models_typesTplGo,
		"models_types.tpl.go",
	)
}

func models_typesTplGo() (*asset, error) {
	bytes, err := models_typesTplGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "models_types.tpl.go", size: 614, mode: os.FileMode(438), modTime: time.Unix(1537088701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _not_usedGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x6b\xdb\x30\x14\x7d\xae\xc1\xff\xe1\xcc\x4f\x76\xe6\xc8\x7d\xe9\xcb\xc0\x0f\xa3\x0b\xa5\xd0\xa6\x5b\xd3\x95\x41\x29\x45\x75\xae\x13\x53\x59\x8a\x25\x7b\x59\x11\xfa\xef\x43\xfe\xc8\xb2\xb0\xe5\x21\x46\xf7\xe3\xdc\x73\xcf\x3d\x61\x90\xcd\xc2\x20\xcb\xa4\x6a\x51\x2a\x0d\xa9\xf6\x98\xcf\xf1\xda\xb5\x78\x23\xda\xa1\xdd\x56\x26\x0c\xca\x4e\x16\xb8\xe5\xc6\x5c\x4b\x43\xba\x7d\xb1\x96\x3d\xf0\x57\x41\x4b\x5e\xd3\x95\x72\x2e\xd6\x6a\x6f\xf0\xf4\x3c\x3b\x4d\xa4\x30\x64\x4c\xa5\x24\x66\x1b\x55\x34\x82\xad\x86\x67\x02\xd2\x5a\x69\xd8\x30\x00\x80\xaa\x84\x20\xd9\xa3\x24\xc8\x73\x9c\x4f\x09\xff\xd3\xd4\x76\x5a\x0e\x0d\x86\x2d\x69\x1f\x47\xfd\x38\x23\xaa\x82\x60\xb6\xaa\x13\x6b\x78\xfe\xaf\x04\xaa\x77\xed\x3b\xe6\xa8\x7a\x9e\xd4\xc7\xb7\x95\xdc\x44\xc9\x80\xe7\x86\xcf\x4f\xae\x3d\xde\x80\x39\x84\x84\xc4\xa7\xfc\x0f\x8b\x91\x97\x34\x8f\x5c\x18\x9f\xd9\x92\xd8\x91\x66\xab\x46\xdc\x72\xf9\xfe\x45\x09\xc1\xb5\x89\x61\xad\x20\x09\x76\xa9\x44\x57\x4b\x03\xe7\x90\x1e\x30\xd2\x56\x77\x34\x22\x0d\xff\xa6\x11\xa6\xd5\x1e\x2e\xba\x5e\xae\x16\xf7\x0f\xb8\x5e\x3e\xdc\x61\x52\x6d\x55\x6c\xa9\xa6\xbb\xae\x75\x0e\x71\x84\x8f\x07\x0d\x22\x58\x3b\x0d\xf1\xd2\x9a\xaf\x5c\xf3\xba\x1f\x77\x5c\x86\x28\xc1\xe3\xe7\x9b\xef\x8b\x95\x0f\x4f\xec\xc3\x60\x28\xc8\x32\xe8\x4e\xa2\xe9\x48\xbf\x4f\x32\x0c\xbb\xd5\xfc\x8d\xe2\xa7\xe7\x4a\xb6\xa4\x4b\x5e\x90\x75\x29\xce\x53\x08\x39\xbb\x48\x90\x65\x17\x28\x2b\x12\xeb\x03\x90\xf7\xc9\x4b\x0a\xad\xf6\xbe\x59\x73\xb9\x21\xf4\x17\x19\x8f\x76\x66\xed\x7c\x0c\x4f\xc2\xb8\x51\xf8\xb3\xb3\x7e\x66\x0e\xbe\xdb\x91\x5c\xc7\xfe\xd5\x23\x31\x6b\x8f\xf6\xbb\xba\x73\x2e\x39\x02\x23\xb9\x9e\x10\xdc\xc4\xa2\x2a\x71\xa3\x36\xbd\x6e\x97\x8d\xb8\xa7\x86\x9d\x9a\xef\xd8\x44\xe3\xf9\x7e\x5c\xde\xa8\x4d\x1c\x1d\x79\xd9\x9f\x1c\x39\x22\xbf\x6e\x3a\x1d\x28\xf5\xbc\xfe\xb6\x8c\xb7\x4b\x3e\xb9\x99\x7d\xf3\x22\xc6\x43\x75\xda\xeb\xc8\x18\x4b\xd8\xe2\x17\x15\x71\x72\xe0\xe7\x7b\x3e\xe4\x90\x95\xf8\x1f\x95\x85\xd6\x31\x69\x9d\xfc\xcb\xed\x27\xfb\x8e\x09\x59\x89\x30\x70\x61\x30\xcb\xc2\xe0\x77\x00\x00\x00\xff\xff\xae\xa5\x48\xae\xbd\x03\x00\x00")

func not_usedGoTplBytes() ([]byte, error) {
	return bindataRead(
		_not_usedGoTpl,
		"not_used.go.tpl",
	)
}

func not_usedGoTpl() (*asset, error) {
	bytes, err := not_usedGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "not_used.go.tpl", size: 957, mode: os.FileMode(438), modTime: time.Unix(1536578275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common.tpl.go":       commonTplGo,
	"model.tpl.go":        modelTplGo,
	"models_types.tpl.go": models_typesTplGo,
	"not_used.go.tpl":     not_usedGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"common.tpl.go":       &bintree{commonTplGo, map[string]*bintree{}},
	"model.tpl.go":        &bintree{modelTplGo, map[string]*bintree{}},
	"models_types.tpl.go": &bintree{models_typesTplGo, map[string]*bintree{}},
	"not_used.go.tpl":     &bintree{not_usedGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
